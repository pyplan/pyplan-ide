{"modelProp": {"libs": []}, "nodeList": [{"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "ex_regressions", "moduleId": "_model_", "nodeClass": "model", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regressions Example", "units": null, "w": "100", "x": 100, "y": 100, "z": 1}, {"color": null, "definition": "import numpy, pandas, cubepy, xarray, math, random\n#fill the following dict keys with the alias you need to import in each node\nresult = {\n    \"np\": numpy,\n    \"pd\": pandas,\n    \"cubepy\": cubepy,\n    \"xr\": xarray,\n    \"math\": math,\n    \"random\": random\n}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "imports", "moduleId": "ex_regressions", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Default imports", "units": null, "w": "184", "x": 56, "y": 447, "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Time Related Indexes and Variables", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "466", "identifier": "node41_copy", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "930", "x": "28", "y": "42", "z": "-2"}, {"color": null, "definition": "result = create_time( '2017.12', '2023.12', freq='M', format='%Y.%m' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "totaltime", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Totaltime", "units": null, "w": "100", "x": "54", "y": "175", "z": 1}, {"color": null, "definition": "result = choice( totaltime, 1 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "initial_modeling_year", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Modeling Year", "units": null, "w": "186", "x": "376", "y": "82", "z": 1}, {"color": null, "definition": "result = choice( decembers ,4)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_horizon", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time Horizon", "units": null, "w": "186", "x": "376", "y": "112", "z": 1}, {"color": null, "definition": "_array_totaltime = to_dataarray(totaltime)\n_mes = apply_fn( _array_totaltime, lambda x: x[5:] )\n\nresult = subset( _mes == '12' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "decembers", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Decembers", "units": null, "w": "100", "x": "166", "y": "175", "z": 1}, {"color": null, "definition": "_months = create_time( initial_modeling_year, time_horizon, freq='M', format='%Y.%m' ).values\n\nresult = pd.Index(_months)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time", "units": null, "w": "100", "x": "283", "y": "175", "z": 1}, {"color": null, "definition": "_time = create_time( initial_modeling_year, time_horizon, freq='M', format='%Y.%m' )\n\nresult = apply_fn( _time, lambda x: x[:4] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "years", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Years", "units": null, "w": "100", "x": "502", "y": "175", "z": 1}, {"color": "#4CBCFF", "definition": "_array_time = to_dataarray(time)\n_mes = apply_fn( _array_time, lambda x: x[5:] )\n\nresult = _mes.astype(int)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_month", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time Month", "units": null, "w": "184", "x": "60", "y": "413", "z": 1}, {"color": null, "definition": "result = pd.Index(['2011','2012','2013','2014','2015','2016','2017','2018','2019','2020','2021','2022','2023','2024','2025','2026','2027','2028','2029'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "totalyears", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Years", "units": null, "w": "100", "x": "396", "y": "175", "z": 1}, {"color": null, "definition": "result = time_horizon", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "max_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Max Time", "units": null, "w": "100", "x": "606", "y": "175", "z": 1}, {"color": null, "definition": "result = initial_modeling_year", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "min_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Min Time", "units": null, "w": "100", "x": "709", "y": "175", "z": 1}, {"color": null, "definition": "result = np.asscalar(\n    subset( get_pos(totaltime) == ( totaltime.values.size - 1 ) ).values\n    )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "max_totaltime", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Max Totaltime", "units": null, "w": "100", "x": "709", "y": "243", "z": 1}, {"color": null, "definition": "result = np.asscalar(\n    subset( get_pos(totaltime) == 0 ).values\n    )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "min_totaltime", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Min Totaltime", "units": null, "w": "100", "x": "813", "y": "243", "z": 1}, {"color": null, "definition": "_list = list( range(1, 13) )\n\nresult = pd.Index( [str(item) for item in _list] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "seasons", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Seasons", "units": null, "w": "100", "x": "606", "y": "243", "z": 1}, {"color": "#4CBCFF", "definition": "result = time_month.astype(str)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "season_to_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Season to Time", "units": null, "w": "184", "x": "60", "y": "460", "z": 1}, {"color": null, "definition": "result = pd.Index( ['Sales Channel 1','Sales Channel 2','Sales Channel 3','Sales Channel 4'] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sales_channels", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Channels", "units": null, "w": "100", "x": "244", "y": "61", "z": 1}, {"color": "#4CBCFF", "definition": "_help_days = xr.DataArray([31,28,31,30,31,30,31,31,30,31,30,31], [seasons])\n_condicion1 = time_month_text == '2'\n_condicion2 = ((time_to_years_numeric - 2000) / 4) == xr.ufuncs.ceil((time_to_years_numeric - 2000) / 4)\n\nresult = xr.where( _condicion1 & _condicion2, 29, lookup( _help_days, time_month_text, seasons) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "days_per_month", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Days per Month", "units": null, "w": "184", "x": "270", "y": "366", "z": 1}, {"color": "#4CBCFF", "definition": "result = time_month.astype(str)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_month_text", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time Month (text)", "units": null, "w": "184", "x": "270", "y": "413", "z": 1}, {"color": null, "definition": "_quarters = []\n\nfor year in years.values:\n    for quarter in range(1,5):\n        _quarters.append( year + '.Q' + str(quarter))\n\nif initial_modeling_year[5:] == '12':\n    _quarters_ok = _quarters[3:]\nelse:\n    _quarters_ok = _quarters\n    \nresult = pd.Index( _quarters_ok )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "quarters", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Quarters", "units": null, "w": "100", "x": "502", "y": "243", "z": 1}, {"color": null, "definition": "_semesters = []\n\nfor year in years.values:\n    for semester in range(1,3):\n        _semesters.append( year + '.S' + str(semester))\n\nif initial_modeling_year[5:] == '12':\n    _semesters_ok = _semesters[1:]\nelse:\n    _semesters_ok = _semesters\n    \nresult = pd.Index( _semesters_ok )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "semesters", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Semesters", "units": null, "w": "100", "x": "395", "y": "243", "z": 1}, {"color": "#4CBCFF", "definition": "_time = to_dataarray(time)\n\nresult = apply_fn(_time, lambda x: x[:4] + '.Q1' if int(x[5:]) <= 3 else x[:4] + '.Q2' if int(x[5:]) <= 6 else x[:4] + '.Q3' if int(x[5:]) <= 9 else x[:4] + '.Q4' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_to_quarter", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time to Quarter", "units": null, "w": "184", "x": "270", "y": "321", "z": 1}, {"color": "#4CBCFF", "definition": "_time = to_dataarray(time)\n\nresult = apply_fn(_time, lambda x: x[:4] + '.S1' if int(x[5:]) <= 6 else x[:4] + '.S2' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_to_semester", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time to Semester", "units": null, "w": "184", "x": "489", "y": "321", "z": 1}, {"color": null, "definition": "result = create_time( '2015.01', initial_modeling_year, freq='M', format='%Y.%m' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "historic_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historic Time", "units": null, "w": "100", "x": "283", "y": "243", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"GDP\",\"Population\",\"Temperature\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "independent_variables", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Independent Variables", "units": null, "w": "100", "x": "41", "y": "61", "z": 1}, {"color": "#FFFF4B", "definition": "result =xr.DataArray([[[  1.56621800e+04,  7.34051000e+03,  6.21937000e+03,  2.95544000e+03,     1.32510000e+03,  4.44266000e+03,  5.25303000e+03,  3.93059000e+03,     2.43101000e+03,  2.28702000e+03,  9.61454000e+03,  5.72747000e+03,     4.92047000e+03,  8.93130000e+02,  3.57100000e+02,  6.00063000e+03,     8.75176000e+03,  5.27370000e+02,  8.57440000e+02],  [  4.19990000e+02,  4.72030000e+02,  7.69530000e+02,  6.93350000e+02,     8.65500000e+01,  1.27880000e+03,  4.86302000e+03,  2.65991000e+03,     8.41520000e+02,  9.48180000e+02,  5.54330000e+03,  4.94725000e+03,     5.50967000e+03,  2.84960000e+02,  2.10600000e+01,  7.61550000e+02,     1.06836000e+03,  6.64600000e+01,  6.06200000e+01],  [  7.41832500e+04,  8.48877900e+04,  1.25755120e+05,  1.24777100e+04,     2.79027000e+03,  2.14250100e+04,  1.36005200e+05,  6.87210000e+04,     1.23539900e+04,  1.37428500e+04,  1.41271730e+05,  1.46473970e+05,     1.36726130e+05,  3.92172000e+03,  3.92946000e+03,  1.01232350e+05,     1.10039040e+05,  3.21679000e+03,  2.07213000e+03],  [  1.75712770e+05,  1.24238810e+05,  1.11312930e+05,  3.31805200e+04,     4.53847100e+04,  4.20743800e+04,  1.55847600e+05,  7.96619800e+04,     3.98331000e+03,  7.20072000e+03,  2.13023840e+05,  2.51934450e+05,     1.59672900e+05,  1.56387800e+04,  3.87910400e+04,  1.18202190e+05,     1.37230090e+05,  2.67983700e+04,  2.45381900e+04]], [[  1.28042200e+04,  6.96894000e+03,  6.53729000e+03,  2.40807000e+03,     1.19877000e+03,  4.76968000e+03,  5.08764000e+03,  3.88612000e+03,     2.51977000e+03,  2.31800000e+03,  4.36573000e+03,  6.03125000e+03,     4.93963000e+03,  7.34140000e+02,  1.95820000e+02,  5.84527000e+03,     8.95343000e+03,  7.22390000e+02,  1.17451899e+03],  [  3.80920000e+02,  4.57630000e+02,  7.85650000e+02,  7.19970000e+02,     8.14400000e+01,  1.32127000e+03,  4.88565000e+03,  2.69341000e+03,     8.75540000e+02,  9.78250000e+02,  5.73672000e+03,  4.99295000e+03,     5.57358000e+03,  2.86950000e+02,  9.11000000e+00,  7.59590000e+02,     1.07385000e+03,  7.12100000e+01,  6.49526061e+01],  [  6.52852100e+04,  7.60946000e+04,  1.17250420e+05,  1.34321300e+04,     3.53802000e+03,  2.25383900e+04,  1.36346740e+05,  6.84704300e+04,     1.28569300e+04,  1.42006100e+04,  1.44812780e+05,  1.47827017e+05,     1.38312099e+05,  3.69753000e+03,  4.26122627e+03,  9.16305200e+04,     1.03550260e+05,  2.77027000e+03,  1.78449932e+03],  [  1.81061570e+05,  1.16392510e+05,  1.07469050e+05,  2.87365600e+04,     3.61367000e+04,  5.79965100e+04,  1.56893070e+05,  8.25723300e+04,     3.97441000e+03,  6.67175000e+03,  1.85044690e+05,  2.54261683e+05,     1.61525043e+05,  1.69591700e+04,  4.20661869e+04,  1.14759820e+05,     1.34099700e+05,  2.86475300e+04,  2.62313915e+04]], [[  1.02776300e+04,  6.91172000e+03,  6.53387000e+03,  3.15815000e+03,     1.43857000e+03,  4.18070000e+03,  4.89661000e+03,  3.93464000e+03,     2.71480000e+03,  2.43564000e+03,  4.36412000e+03,  5.19508000e+03,     4.59059000e+03,  5.86300000e+02,  4.92820000e+02,  5.80391000e+03,     8.64239000e+03,  6.59690000e+02,  1.07257636e+03],  [  3.85430000e+02,  4.37100000e+02,  7.66290000e+02,  7.93480000e+02,     1.13460000e+02,  1.42296000e+03,  4.97170000e+03,  2.75619000e+03,     9.52980000e+02,  1.04395000e+03,  5.68825000e+03,  5.14605000e+03,     5.71596000e+03,  2.88540000e+02,  2.13400000e+01,  7.47060000e+02,     1.07105000e+03,  9.19900000e+01,  8.39066175e+01],  [  4.23282000e+04,  5.33590300e+04,  9.48931200e+04,  1.38743800e+04,     4.66038000e+03,  2.41574600e+04,  1.36842260e+05,  6.89184000e+04,     1.40392900e+04,  1.52327100e+04,  1.41227360e+05,  1.52359871e+05,     1.41845354e+05,  3.27306000e+03,  4.75866084e+03,  6.63152900e+04,     8.63249400e+04,  2.93690000e+03,  1.89183584e+03],  [  1.53450980e+05,  1.00131290e+05,  9.58133100e+04,  4.66129600e+04,     4.39651800e+04,  4.53057300e+04,  1.64633200e+05,  8.40604700e+04,     4.18638000e+03,  7.00787000e+03,  2.09277420e+05,  2.62058169e+05,     1.65651284e+05,  1.89389000e+04,  4.69767864e+04,  1.05347240e+05,     1.29704680e+05,  2.09123000e+04,  1.91485524e+04]], [[  1.40205700e+04,  6.77509000e+03,  6.22040000e+03,  3.23845000e+03,     7.80290000e+02,  4.08989000e+03,  5.00308000e+03,  3.84615000e+03,     2.59476000e+03,  2.36370000e+03,  4.93584000e+03,  5.77138000e+03,     4.70876000e+03,  6.54640000e+02,  8.48320000e+02,  5.98947000e+03,     8.67914000e+03,  7.35870000e+02,  1.19643585e+03],  [  3.43520000e+02,  4.42190000e+02,  7.72360000e+02,  7.48410000e+02,     9.43300000e+01,  1.36484000e+03,  4.91673000e+03,  2.70002000e+03,     9.07080000e+02,  1.00761000e+03,  5.72374000e+03,  4.94588000e+03,     5.64869000e+03,  2.91820000e+02,  2.81500000e+01,  7.61960000e+02,     1.08197000e+03,  7.79300000e+01,  7.10821035e+01],  [  5.85052600e+04,  7.04837300e+04,  1.12298940e+05,  1.27819600e+04,     4.08140000e+03,  2.33305400e+04,  1.36681630e+05,  6.88871100e+04,     1.33583900e+04,  1.49147400e+04,  1.40175470e+05,  1.46433408e+05,     1.40176004e+05,  3.70571000e+03,  4.01140216e+03,  8.54271700e+04,     9.96564000e+04,  3.15125000e+03,  2.02991170e+03],  [  1.58289470e+05,  1.12089100e+05,  1.06228060e+05,  4.09104200e+04,     5.42187500e+04,  4.00217900e+04,  1.67382970e+05,  7.97561800e+04,     4.10200000e+03,  6.95288000e+03,  2.07804410e+05,  2.51864684e+05,     1.63701767e+05,  1.59649000e+04,  3.95999608e+04,  1.13407100e+05,     1.35888110e+05,  2.18161100e+04,  1.99761348e+04]], [[  7.86489000e+03,  7.03754000e+03,  6.07359000e+03,  3.20019000e+03,     1.38730000e+03,  4.85328000e+03,  4.53559000e+03,  3.95813000e+03,     2.96293000e+03,  2.58878000e+03,  2.50789000e+03,  4.87691000e+03,     4.29436000e+03,  7.54810000e+02,  3.40340000e+02,  5.44972000e+03,     8.58771000e+03,  1.11903000e+03,  1.81940778e+03],  [  3.36300000e+02,  4.10420000e+02,  7.49830000e+02,  8.88670000e+02,     1.26640000e+02,  1.55558000e+03,  5.08840000e+03,  2.83034000e+03,     1.04962000e+03,  1.12826000e+03,  6.12339000e+03,  5.06823000e+03,     5.93178000e+03,  3.03090000e+02,  2.07900000e+01,  7.37520000e+02,     1.07528000e+03,  1.23570000e+02,  1.12711607e+02],  [  1.51205100e+04,  2.66920300e+04,  6.85551400e+04,  1.51683100e+04,     4.46245000e+03,  2.63523900e+04,  1.37779420e+05,  6.93365100e+04,     1.54476600e+04,  1.65271300e+04,  1.42164260e+05,  1.50055843e+05,     1.47201071e+05,  3.64673000e+03,  4.86774955e+03,  3.66309200e+04,     6.62642500e+04,  4.00315000e+03,  2.57867228e+03],  [  1.27112330e+05,  7.86799500e+04,  8.47658300e+04,  3.00916500e+04,     5.14951700e+04,  4.66195400e+04,  1.56654580e+05,  8.28263200e+04,     4.32248000e+03,  7.40226000e+03,  2.14568870e+05,  2.58095252e+05,     1.71905852e+05,  1.93730600e+04,  4.80536938e+04,  9.45425900e+04,     1.26312910e+05,  2.19231100e+04,  2.00741104e+04]], [[  8.63311000e+03,  6.78068000e+03,  6.03532000e+03,  2.66137000e+03,     1.61846000e+03,  4.53617000e+03,  5.00508000e+03,  3.93298000e+03,     2.71509000e+03,  2.48712000e+03,  5.05850000e+03,  5.44967000e+03,     4.68703000e+03,  6.28220000e+02,  4.73910000e+02,  5.89473000e+03,     9.00388000e+03,  6.79710000e+02,  1.10512646e+03],  [  3.31750000e+02,  4.32340000e+02,  7.79870000e+02,  7.89380000e+02,     1.04520000e+02,  1.42898000e+03,  5.00869000e+03,  2.76768000e+03,     9.52920000e+02,  1.04960000e+03,  5.74024000e+03,  5.03085000e+03,     5.75425000e+03,  2.98430000e+02,  1.46500000e+01,  7.63550000e+02,     1.08962000e+03,  8.85400000e+01,  8.07597773e+01],  [  4.84136100e+04,  6.02385700e+04,  1.02443060e+05,  1.42120900e+04,     4.07083000e+03,  2.35588700e+04,  1.37999220e+05,  6.96057600e+04,     1.40131100e+04,  1.53390000e+04,  1.41049110e+05,  1.48949128e+05,     1.42795546e+05,  3.66123000e+03,  3.69751834e+03,  7.40139100e+04,     9.21324600e+04,  2.67833000e+03,  1.72527518e+03],  [  1.54866130e+05,  1.07081110e+05,  1.03522010e+05,  2.92918200e+04,     3.20394200e+04,  4.39540700e+04,  1.62348140e+05,  8.52579900e+04,     4.18310000e+03,  7.14198000e+03,  1.96514610e+05,  2.56191708e+05,     1.66760947e+05,  1.47156800e+04,  3.65013467e+04,  1.10317080e+05,     1.34816930e+05,  2.85131100e+04,  2.61083085e+04]], [[  8.59407000e+03,  6.62413000e+03,  6.35243000e+03,  3.18128000e+03,     1.31110000e+03,  4.13446000e+03,  4.69187000e+03,  3.93198000e+03,     2.89275000e+03,  2.54980000e+03,  2.15068000e+03,  5.01059000e+03,     4.39723000e+03,  7.64890000e+02,  5.13070000e+02,  5.61197000e+03,     8.87309000e+03,  8.66860000e+02,  1.40940979e+03],  [  3.99010000e+02,  4.22220000e+02,  7.68090000e+02,  8.54190000e+02,     1.23680000e+02,  1.51739000e+03,  5.05979000e+03,  2.84801000e+03,     1.01944000e+03,  1.10702000e+03,  5.96458000e+03,  5.14518000e+03,     5.88103000e+03,  3.08710000e+02,  2.06400000e+01,  7.55980000e+02,     1.08104000e+03,  1.02700000e+02,  9.36755041e+01],  [  2.97012700e+04,  4.09189200e+04,  8.33693700e+04,  1.50346500e+04,     4.59962000e+03,  2.54517700e+04,  1.38317600e+05,  6.96121600e+04,     1.50171700e+04,  1.62023000e+04,  1.41763730e+05,  1.52334113e+05,     1.45941676e+05,  3.65100000e+03,  4.05116969e+03,  5.26493200e+04,     7.76704700e+04,  2.94112000e+03,  1.89455419e+03],  [  1.25120620e+05,  9.21342900e+04,  9.21425500e+04,  3.45243200e+04,     4.21030700e+04,  4.35404200e+04,  1.64234940e+05,  8.92705900e+04,     4.24972000e+03,  6.96761000e+03,  2.29967270e+05,  2.62013865e+05,     1.70435092e+05,  1.61231700e+04,  3.99925399e+04,  1.02483390e+05,     1.32047760e+05,  2.72364300e+04,  2.49393039e+04]], [[  9.26294000e+03,  6.69224000e+03,  6.52807000e+03,  2.84286000e+03,     1.48000000e+03,  5.10045000e+03,  4.89979000e+03,  3.97296000e+03,     2.78110000e+03,  2.48176000e+03,  3.91657000e+03,  5.05400000e+03,     4.64444000e+03,  7.59760000e+02,  4.40780000e+02,  5.93275000e+03,     8.65252000e+03,  8.98500000e+02,  1.46085261e+03],  [  4.36220000e+02,  4.57330000e+02,  8.00010000e+02,  8.02460000e+02,     1.04740000e+02,  1.45224000e+03,  5.04851000e+03,  2.78510000e+03,     9.66310000e+02,  1.06432000e+03,  5.86254000e+03,  5.06917000e+03,     5.79733000e+03,  3.06770000e+02,  2.05300000e+01,  7.69770000e+02,     1.09824000e+03,  9.41900000e+01,  8.59132982e+01],  [  4.88588700e+04,  6.06803800e+04,  1.03225260e+05,  1.36725500e+04,     5.05019000e+03,  2.43939900e+04,  1.38815410e+05,  6.96619200e+04,     1.42207400e+04,  1.52892100e+04,  1.43276730e+05,  1.50083674e+05,     1.43864604e+05,  3.82202000e+03,  3.79637308e+03,  7.45077400e+04,     9.28259900e+04,  3.22598000e+03,  2.07804984e+03],  [  1.53913560e+05,  1.07199040e+05,  1.04571000e+05,  3.56701500e+04,     4.34011500e+04,  5.69889500e+04,  1.62764810e+05,  8.54999200e+04,     3.81921000e+03,  7.46210000e+03,  2.22153490e+05,  2.58143121e+05,     1.68009426e+05,  1.51091100e+04,  3.74772259e+04,  1.12215980e+05,     1.36851560e+05,  2.85046200e+04,  2.61005345e+04]], [[  9.67128000e+03,  7.31247000e+03,  7.41783000e+03,  3.02612000e+03,     9.93130000e+02,  4.34605000e+03,  5.36480000e+03,  3.95955000e+03,     2.46999000e+03,  2.39171000e+03,  5.22806000e+03,  5.83911000e+03,     5.04400000e+03,  8.13900000e+02,  5.68310000e+02,  6.48144000e+03,     9.10576000e+03,  4.61570000e+02,  7.50457138e+02],  [  4.11360000e+02,  5.03330000e+02,  8.18600000e+02,  6.95930000e+02,     8.69900000e+01,  1.29831000e+03,  4.94482000e+03,  2.70920000e+03,     8.51480000e+02,  9.70880000e+02,  5.71044000e+03,  5.06438000e+03,     5.57725000e+03,  3.10700000e+02,  2.38900000e+01,  8.07100000e+02,     1.11533000e+03,  6.51800000e+01,  5.94524767e+01],  [  8.86406100e+04,  1.00235750e+05,  1.43021510e+05,  1.26415200e+04,     3.85352000e+03,  2.24723000e+04,  1.39268610e+05,  6.99701700e+04,     1.24798500e+04,  1.42733900e+04,  1.45234600e+05,  1.49941855e+05,     1.38403173e+05,  4.05859000e+03,  4.33457772e+03,  1.18500050e+05,     1.23241670e+05,  2.56781000e+03,  1.65408253e+03],  [  1.93647650e+05,  1.41019740e+05,  1.24985430e+05,  3.87209900e+04,     3.72308400e+04,  5.15483800e+04,  1.62990310e+05,  8.94877200e+04,     4.06305000e+03,  7.15277000e+03,  2.08118820e+05,  2.57899195e+05,     1.61631401e+05,  1.72511000e+04,  4.27903014e+04,  1.31939410e+05,     1.46874750e+05,  1.94587100e+04,  1.78175584e+04]], [[  1.51617600e+04,  8.09867000e+03,  7.17602000e+03,  2.58216000e+03,     1.30571000e+03,  4.60245000e+03,  5.21488000e+03,  3.86346000e+03,     2.56503000e+03,  2.43189000e+03,  3.58078000e+03,  5.89617000e+03,     5.00601000e+03,  9.15260000e+02,  6.35020000e+02,  6.27129000e+03,     9.09890000e+03,  7.00140000e+02,  1.13834318e+03],  [  4.41350000e+02,  4.73540000e+02,  8.16650000e+02,  7.35190000e+02,     8.88500000e+01,  1.33517000e+03,  4.95916000e+03,  2.72135000e+03,     8.85560000e+02,  1.00110000e+03,  5.72876000e+03,  5.09054000e+03,     5.64811000e+03,  3.13370000e+02,  2.15000000e+01,  8.02040000e+02,     1.10816000e+03,  6.96700000e+01,  6.35479296e+01],  [  7.92785400e+04,  9.15376000e+04,  1.34611160e+05,  1.34522200e+04,     6.00986000e+03,  2.28883200e+04,  1.39304740e+05,  6.94850000e+04,     1.29877400e+04,  1.47034400e+04,  1.42735020e+05,  1.50716378e+05,     1.40161611e+05,  4.23602000e+03,  4.37730514e+03,  1.08908880e+05,     1.16833370e+05,  3.07170000e+03,  1.97866871e+03],  [  1.93532780e+05,  1.32617920e+05,  1.21203530e+05,  3.78146300e+04,     4.20079700e+04,  4.31646800e+04,  1.61582790e+05,  8.77014900e+04,     4.37875000e+03,  7.46077000e+03,  2.10337710e+05,  2.59231370e+05,     1.63684958e+05,  1.74211500e+04,  4.32121001e+04,  1.28872230e+05,     1.45108800e+05,  2.66163400e+04,  2.43715124e+04]], [[  1.02917400e+04,  7.33197000e+03,  6.72746000e+03,  2.59875000e+03,     1.53085000e+03,  4.90294000e+03,  5.00737000e+03,  3.97699000e+03,     2.76944000e+03,  2.53386000e+03,  4.65637000e+03,  5.53139000e+03,     4.67627000e+03,  8.69390000e+02,  2.74300000e+02,  6.14036000e+03,     9.24768000e+03,  8.70560000e+02,  1.41542554e+03],  [  4.18880000e+02,  4.71480000e+02,  7.94570000e+02,  7.98780000e+02,     1.07660000e+02,  1.44250000e+03,  5.02740000e+03,  2.77961000e+03,     9.62870000e+02,  1.06733000e+03,  5.92345000e+03,  5.14166000e+03,     5.80227000e+03,  3.16780000e+02,  1.38500000e+01,  7.90310000e+02,     1.11441000e+03,  9.05200000e+01,  8.25657899e+01],  [  5.62089100e+04,  6.87681400e+04,  1.12260510e+05,  1.40658800e+04,     4.75686000e+03,  2.41395900e+04,  1.39420800e+05,  7.01962000e+04,     1.41802900e+04,  1.58020900e+04,  1.47326040e+05,  1.52229896e+05,     1.43987194e+05,  4.01818000e+03,  4.15406978e+03,  8.37742700e+04,     9.97169300e+04,  2.45063000e+03,  1.57859977e+03],  [  1.63138110e+05,  1.16209620e+05,  1.09570460e+05,  3.57502400e+04,     4.41048000e+04,  3.86368200e+04,  1.61898110e+05,  8.59759600e+04,     4.09184000e+03,  7.41125000e+03,  2.04943540e+05,  2.61834612e+05,     1.68152589e+05,  1.65327000e+04,  4.10083540e+04,  1.18576900e+05,     1.41499560e+05,  2.30585900e+04,  2.11138238e+04]], [[  1.01149000e+04,  7.91748000e+03,  7.41203000e+03,  2.45239000e+03,     1.43174000e+03,  4.77814000e+03,  5.16624000e+03,  3.94895000e+03,     2.65285000e+03,  2.47671000e+03,  5.46788000e+03,  5.39780000e+03,     4.83174000e+03,  9.20930000e+02,  3.18140000e+02,  6.17944000e+03,     9.19204000e+03,  6.63990000e+02,  1.07956764e+03],  [  4.43490000e+02,  4.54340000e+02,  8.22620000e+02,  7.63460000e+02,     9.14600000e+01,  1.38867000e+03,  5.02497000e+03,  2.76254000e+03,     9.17000000e+02,  1.03077000e+03,  5.81072000e+03,  5.05831000e+03,     5.72368000e+03,  3.18070000e+02,  2.63600000e+01,  8.10740000e+02,     1.12071000e+03,  8.23800000e+01,  7.51410713e+01],  [  7.38678500e+04,  8.64543500e+04,  1.29830930e+05,  1.40656000e+04,     4.94876000e+03,  2.38945100e+04,  1.40163320e+05,  7.05619600e+04,     1.34628600e+04,  1.47821100e+04,  1.43568290e+05,  1.49762140e+05,     1.42036931e+05,  4.21333000e+03,  4.29461421e+03,  1.02972350e+05,     1.13095440e+05,  2.73704000e+03,  1.76309386e+03],  [  1.77679110e+05,  1.33564680e+05,  1.20232370e+05,  3.30902400e+04,     3.98349700e+04,  5.30933500e+04,  1.67562890e+05,  8.48931100e+04,     4.38618000e+03,  7.36443000e+03,  2.37060070e+05,  2.57590085e+05,     1.65875013e+05,  1.70920500e+04,  4.23957876e+04,  1.28120620e+05,     1.47322130e+05,  2.38464900e+04,  2.18352722e+04]], [[  9.16123000e+03,  7.32262000e+03,  6.61636000e+03,  3.05172000e+03,     6.82130000e+02,  4.71597000e+03,  4.68445000e+03,  4.02585000e+03,     3.00391000e+03,  2.67335000e+03,  2.57957000e+03,  5.14429000e+03,     4.28480000e+03,  7.52870000e+02,  2.70830000e+02,  5.92305000e+03,     8.75078000e+03,  1.06820000e+03,  1.73676434e+03],  [  3.19420000e+02,  4.34680000e+02,  7.97780000e+02,  8.91420000e+02,     1.37170000e+02,  1.57672000e+03,  5.18541000e+03,  2.91066000e+03,     1.05955000e+03,  1.15228000e+03,  5.93590000e+03,  5.12502000e+03,     6.02118000e+03,  3.33700000e+02,  1.78100000e+01,  7.78450000e+02,     1.11649000e+03,  1.17840000e+02,  1.07485116e+02],  [  2.92920600e+04,  4.27194000e+04,  8.61684600e+04,  1.49584400e+04,     4.79324000e+03,  2.59020300e+04,  1.40712860e+05,  7.06488600e+04,     1.56349800e+04,  1.68019500e+04,  1.43852400e+05,  1.51737233e+05,     1.49419591e+05,  4.00349000e+03,  4.16564299e+03,  5.42711300e+04,     7.98618500e+04,  3.08878000e+03,  1.98967098e+03],  [  1.41585130e+05,  9.97367800e+04,  1.00026210e+05,  3.92906900e+04,     3.60567800e+04,  4.72491600e+04,  1.57878750e+05,  8.39268500e+04,     4.47736000e+03,  6.89242000e+03,  2.37217560e+05,  2.60987234e+05,     1.74496707e+05,  1.65787600e+04,  4.11226031e+04,  1.08086950e+05,     1.37916230e+05,  2.52176500e+04,  2.30907883e+04]], [[  7.89950000e+03,  7.13639000e+03,  7.48637000e+03,  2.82286000e+03,     1.18490000e+03,  4.33907000e+03,  5.03495000e+03,  4.04270000e+03,     2.75872000e+03,  2.54976000e+03,  4.71189000e+03,  5.76006000e+03,     4.73058000e+03,  8.83960000e+02,  2.88280000e+02,  6.32787000e+03,     9.43595000e+03,  1.02050000e+03,  1.65920989e+03],  [  4.70010000e+02,  4.75600000e+02,  8.14390000e+02,  8.03040000e+02,     9.85200000e+01,  1.44188000e+03,  5.06487000e+03,  2.82281000e+03,     9.62240000e+02,  1.07139000e+03,  5.82817000e+03,  5.10564000e+03,     5.81540000e+03,  3.25080000e+02,  1.57600000e+01,  8.03060000e+02,     1.12902000e+03,  8.69400000e+01,  7.93003732e+01],  [  6.26462900e+04,  7.47133600e+04,  1.18720220e+05,  1.38491600e+04,     3.85310000e+03,  2.51299300e+04,  1.41407620e+05,  7.06216900e+04,     1.41065300e+04,  1.58449100e+04,  1.48678370e+05,  1.51163446e+05,     1.44313024e+05,  3.82374000e+03,  4.14535092e+03,  9.03669900e+04,     1.04659590e+05,  2.62897000e+03,  1.69347940e+03],  [  1.67921020e+05,  1.20828550e+05,  1.15635980e+05,  4.24286700e+04,     3.76563800e+04,  3.71888100e+04,  1.64576590e+05,  8.10938200e+04,     4.35856000e+03,  7.36720000e+03,  2.23927240e+05,  2.60000324e+05,     1.68533103e+05,  1.64980000e+04,  4.09222828e+04,  1.23335420e+05,     1.45601260e+05,  2.42590800e+04,  2.22130642e+04]], [[  1.53167900e+04,  7.21238000e+03,  7.02035000e+03,  3.22529000e+03,     1.43813000e+03,  5.01967000e+03,  4.89299000e+03,  3.93065000e+03,     2.93565000e+03,  2.62800000e+03,  1.91898000e+03,  5.31429000e+03,     4.45989000e+03,  9.59550000e+02,  5.50240000e+02,  6.10652000e+03,     8.99407000e+03,  1.29424000e+03,  2.10427811e+03],  [  4.19670000e+02,  4.56740000e+02,  8.09730000e+02,  8.60650000e+02,     1.25340000e+02,  1.53364000e+03,  5.16008000e+03,  2.85548000e+03,     1.02788000e+03,  1.12670000e+03,  6.10601000e+03,  5.14866000e+03,     5.95600000e+03,  3.29320000e+02,  2.37200000e+01,  7.92430000e+02,     1.13009000e+03,  1.00900000e+02,  9.20336744e+01],  [  4.22484400e+04,  5.43313200e+04,  9.83855800e+04,  1.53861300e+04,     5.19566000e+03,  2.56593800e+04,  1.40762210e+05,  7.12499100e+04,     1.51293700e+04,  1.65162000e+04,  1.44371180e+05,  1.52437146e+05,     1.47802106e+05,  3.57157000e+03,  4.55217473e+03,  6.76107700e+04,     8.91668700e+04,  3.20861000e+03,  2.06686076e+03],  [  1.53741640e+05,  1.07749150e+05,  1.04468600e+05,  3.04858300e+04,     4.24598000e+04,  6.83483100e+04,  1.65471180e+05,  9.04166900e+04,     4.54262000e+03,  7.08303000e+03,  2.21805330e+05,  2.62191081e+05,     1.72607759e+05,  1.81171100e+04,  4.49383864e+04,  1.14374480e+05,     1.41670360e+05,  2.07217500e+04,  1.89740734e+04]], [[  1.11776000e+04,  7.78305000e+03,  7.24576000e+03,  3.19905000e+03,     1.40053000e+03,  4.18018000e+03,  5.04413000e+03,  3.99342000e+03,     2.79006000e+03,  2.56480000e+03,  5.22345000e+03,  5.24925000e+03,     4.65434000e+03,  9.81800000e+02,  4.92310000e+02,  6.32180000e+03,     9.32019000e+03,  1.01681000e+03,  1.65321040e+03],  [  3.40040000e+02,  4.68810000e+02,  8.11650000e+02,  8.09600000e+02,     9.91100000e+01,  1.46185000e+03,  5.10490000e+03,  2.83978000e+03,     9.74010000e+02,  1.08257000e+03,  5.91957000e+03,  5.13310000e+03,     5.85482000e+03,  3.30060000e+02,  5.76000000e+00,  8.03150000e+02,     1.13030000e+03,  9.57800000e+01,  8.73635811e+01],  [  5.90894600e+04,  7.29714500e+04,  1.16764800e+05,  1.35198700e+04,     4.80990000e+03,  2.42449600e+04,  1.41696820e+05,  7.13367400e+04,     1.43265800e+04,  1.57232300e+04,  1.48162780e+05,  1.51976459e+05,     1.45291257e+05,  4.38082000e+03,  3.92348997e+03,  8.79608100e+04,     1.03146270e+05,  2.60742000e+03,  1.67959774e+03],  [  1.71652150e+05,  1.22993650e+05,  1.14945320e+05,  3.15862700e+04,     4.52768700e+04,  5.91666500e+04,  1.63910040e+05,  8.66235000e+04,     4.21268000e+03,  7.53760000e+03,  2.17706140e+05,  2.61398701e+05,     1.69675514e+05,  1.56150200e+04,  3.87321048e+04,  1.22816400e+05,     1.45240200e+05,  2.40263300e+04,  2.19999444e+04]], [[  1.27584000e+04,  7.90831000e+03,  7.23024000e+03,  3.22422000e+03,     1.40961000e+03,  3.98179000e+03,  5.46008000e+03,  4.03834000e+03,     2.51870000e+03,  2.47377000e+03,  6.58809000e+03,  6.03580000e+03,     5.15880000e+03,  1.06161000e+03,  9.63020000e+02,  6.76388000e+03,     9.25318000e+03,  8.72970000e+02,  1.41934391e+03],  [  4.90500000e+02,  5.12570000e+02,  8.43100000e+02,  7.13810000e+02,     8.57500000e+01,  1.31118000e+03,  5.01388000e+03,  2.73282000e+03,     8.65640000e+02,  9.92710000e+02,  5.73487000e+03,  5.14224000e+03,     5.65791000e+03,  3.29940000e+02,  2.64200000e+01,  8.28100000e+02,     1.14398000e+03,  7.28100000e+01,  6.64120102e+01],  [  9.54806100e+04,  1.08473150e+05,  1.52819760e+05,  1.30519500e+04,     3.55837000e+03,  2.23555900e+04,  1.41967560e+05,  7.11506900e+04,     1.26512800e+04,  1.43366700e+04,  1.45569700e+05,  1.52247068e+05,     1.40404804e+05,  4.19273000e+03,  3.45933027e+03,  1.27922320e+05,     1.30760000e+05,  2.82263000e+03,  1.81822758e+03],  [  2.10345900e+05,  1.49121950e+05,  1.33824810e+05,  4.02494800e+04,     4.35822600e+04,  5.54703000e+04,  1.64527010e+05,  8.71052900e+04,     4.20568000e+03,  7.79332000e+03,  2.10541360e+05,  2.61864148e+05,     1.63968967e+05,  1.37677200e+04,  3.41499898e+04,  1.39959160e+05,     1.53684280e+05,  2.57471800e+04,  2.35756576e+04]], [[  1.04546300e+04,  7.24010000e+03,  7.80006000e+03,  2.58665000e+03,     7.60930000e+02,  4.53507000e+03,  5.40206000e+03,  4.07823000e+03,     2.49549000e+03,  2.44324000e+03,  7.23127000e+03,  6.15490000e+03,     5.22939000e+03,  9.75330000e+02,  7.33980000e+02,  6.82996000e+03,     9.30577000e+03,  5.63890000e+02,  9.16817114e+02],  [  5.09050000e+02,  5.29100000e+02,  8.56870000e+02,  7.08350000e+02,     9.19100000e+01,  1.31428000e+03,  5.04760000e+03,  2.75026000e+03,     8.62200000e+02,  9.91110000e+02,  5.67793000e+03,  5.22933000e+03,     5.67550000e+03,  3.30320000e+02,  3.02400000e+01,  8.32490000e+02,     1.14770000e+03,  6.97500000e+01,  6.36208998e+01],  [  9.73496000e+04,  1.10625850e+05,  1.54712510e+05,  1.29144700e+04,     4.36218000e+03,  2.17446800e+04,  1.41701530e+05,  7.16070500e+04,     1.26654700e+04,  1.40259200e+04,  1.46661150e+05,  1.54825555e+05,     1.40841312e+05,  4.09300000e+03,  3.45534523e+03,  1.30011280e+05,     1.32237700e+05,  3.10623000e+03,  2.00091158e+03],  [  2.09045620e+05,  1.51067430e+05,  1.33942290e+05,  3.43618500e+04,     3.66707800e+04,  5.03349300e+04,  1.69832460e+05,  8.31112000e+04,     4.01011000e+03,  7.68843000e+03,  2.17979410e+05,  2.66299131e+05,     1.64478734e+05,  1.37518600e+04,  3.41106500e+04,  1.40760420e+05,     1.54553850e+05,  2.55586200e+04,  2.34030008e+04]], [[  1.23154400e+04,  7.40513000e+03,  7.84770000e+03,  2.53698000e+03,     1.56031000e+03,  4.62493000e+03,  5.57954000e+03,  4.08691000e+03,     2.47638000e+03,  2.42311000e+03,  6.74921000e+03,  6.52035000e+03,     5.24796000e+03,  9.72140000e+02,  3.04050000e+02,  6.88707000e+03,     9.64357000e+03,  5.25660000e+02,  8.54659746e+02],  [  5.57310000e+02,  5.49770000e+02,  8.65690000e+02,  6.94870000e+02,     7.95700000e+01,  1.28982000e+03,  5.00877000e+03,  2.73951000e+03,     8.44600000e+02,  9.76580000e+02,  5.72482000e+03,  5.04729000e+03,     5.64606000e+03,  3.32830000e+02,  2.37300000e+01,  8.37030000e+02,     1.15970000e+03,  5.98000000e+01,  5.45452302e+01],  [  1.03900450e+05,  1.17143770e+05,  1.61539290e+05,  1.29659300e+04,     3.88286000e+03,  2.27212600e+04,  1.42289430e+05,  7.13258400e+04,     1.23584700e+04,  1.44717400e+04,  1.48652840e+05,  1.49435869e+05,     1.40110739e+05,  4.46398000e+03,  4.17928662e+03,  1.37289020e+05,     1.37287250e+05,  2.60542000e+03,  1.67830941e+03],  [  2.21893930e+05,  1.56545250e+05,  1.37802380e+05,  2.94927600e+04,     3.88717900e+04,  5.08149600e+04,  1.65213270e+05,  8.76231300e+04,     3.99049000e+03,  7.20937000e+03,  2.03346290e+05,  2.57028901e+05,     1.63625548e+05,  1.66330600e+04,  4.12572909e+04,  1.44450670e+05,     1.56409470e+05,  2.14194100e+04,  1.96128926e+04]], [[  1.64486600e+04,  7.69960000e+03,  7.72594000e+03,  2.66997000e+03,     1.43169000e+03,  3.82646000e+03,  5.85416000e+03,  4.00008000e+03,     2.31002000e+03,  2.34715000e+03,  7.03088000e+03,  6.70718000e+03,     5.62591000e+03,  1.10680000e+03,  3.81830000e+02,  7.05905000e+03,     9.19085000e+03,  5.92940000e+02,  9.64048910e+02],  [  4.03390000e+02,  5.47720000e+02,  8.74650000e+02,  6.40540000e+02,     7.37000000e+01,  1.20176000e+03,  4.98553000e+03,  2.68234000e+03,     7.76350000e+02,  9.20430000e+02,  5.64288000e+03,  5.03623000e+03,     5.51821000e+03,  3.41790000e+02,  9.08000000e+00,  8.54330000e+02,     1.15970000e+03,  5.34200000e+01,  4.87258561e+01],  [  1.26323580e+05,  1.40166720e+05,  1.84593450e+05,  1.17344900e+04,     4.86825000e+03,  2.03914500e+04,  1.42694490e+05,  7.13949300e+04,     1.13826300e+04,  1.33949000e+04,  1.45395290e+05,  1.49108414e+05,     1.36938056e+05,  4.47271000e+03,  4.06229315e+03,  1.62838240e+05,     1.54976690e+05,  2.17154000e+03,  1.39882093e+03],  [  2.46559600e+05,  1.73211350e+05,  1.50013060e+05,  3.75987700e+04,     3.51308600e+04,  4.84511100e+04,  1.65698000e+05,  8.48682000e+04,     4.07984000e+03,  7.22685000e+03,  2.09288290e+05,  2.56465680e+05,     1.59920393e+05,  1.61674400e+04,  4.01023489e+04,  1.54995910e+05,     1.62436050e+05,  2.75346800e+04,  2.52123995e+04]], [[  1.38867400e+04,  8.77526000e+03,  7.74476000e+03,  3.10310000e+03,     2.95250000e+02,  4.13459000e+03,  5.63709000e+03,  3.99630000e+03,     2.43513000e+03,  2.41007000e+03,  7.27663000e+03,  6.37333000e+03,     5.35593000e+03,  1.06257000e+03,  5.13630000e+02,  6.88118000e+03,     9.70137000e+03,  9.62600000e+02,  1.56507147e+03],  [  5.20350000e+02,  5.28600000e+02,  8.68240000e+02,  6.82030000e+02,     7.16300000e+01,  1.26538000e+03,  5.00955000e+03,  2.74934000e+03,     8.27450000e+02,  9.63620000e+02,  5.70911000e+03,  5.06251000e+03,     5.62523000e+03,  3.35350000e+02,  1.61100000e+01,  8.45800000e+02,     1.15894000e+03,  5.45100000e+01,  4.97200752e+01],  [  1.10725500e+05,  1.24582830e+05,  1.68872450e+05,  1.22297000e+04,     3.94354000e+03,  2.14022200e+04,  1.43634180e+05,  7.19539100e+04,     1.21012900e+04,  1.40125100e+04,  1.49296370e+05,  1.49886490e+05,     1.39593828e+05,  4.31803000e+03,  4.11608622e+03,  1.45410760e+05,     1.43033650e+05,  2.10525000e+03,  1.35611951e+03],  [  2.16283780e+05,  1.61723420e+05,  1.42871480e+05,  3.29063900e+04,     4.62993500e+04,  4.14838100e+04,  1.71102910e+05,  8.59399700e+04,     3.96751000e+03,  7.50004000e+03,  2.16637360e+05,  2.57803966e+05,     1.63021885e+05,  1.63815300e+04,  4.06333861e+04,  1.47851820e+05,     1.58804910e+05,  2.29578600e+04,  2.10215894e+04]], [[  1.32981200e+04,  7.57518000e+03,  7.45235000e+03,  3.02774000e+03,     1.08047000e+03,  4.26347000e+03,  5.50136000e+03,  4.02794000e+03,     2.53185000e+03,  2.47167000e+03,  7.01341000e+03,  6.37237000e+03,     5.21533000e+03,  1.00814000e+03,  2.89450000e+02,  6.75634000e+03,     9.54143000e+03,  8.36330000e+02,  1.35977169e+03],  [  3.18210000e+02,  5.10400000e+02,  8.51220000e+02,  7.16660000e+02,     8.80700000e+01,  1.32666000e+03,  5.02794000e+03,  2.78440000e+03,     8.71380000e+02,  1.00059000e+03,  5.81439000e+03,  5.17003000e+03,     5.70653000e+03,  3.33890000e+02,  1.56700000e+01,  8.39120000e+02,     1.15831000e+03,  7.17000000e+01,  6.53995486e+01],  [  9.79272200e+04,  1.11051340e+05,  1.55466960e+05,  1.22277800e+04,     5.37393000e+03,  2.30941600e+04,  1.43218730e+05,  7.13877100e+04,     1.27342900e+04,  1.42002400e+04,  1.47442060e+05,  1.53069851e+05,     1.41611342e+05,  4.19746000e+03,  4.39165231e+03,  1.30490710e+05,     1.32835720e+05,  2.77171000e+03,  1.78542691e+03],  [  2.16430110e+05,  1.53337530e+05,  1.35999760e+05,  3.56494700e+04,     3.72195500e+04,  4.28745900e+04,  1.66785720e+05,  9.12030000e+04,     4.17525000e+03,  7.72994000e+03,  2.04719410e+05,  2.63279330e+05,     1.65377998e+05,  1.74782500e+04,  4.33537332e+04,  1.42285110e+05,     1.55458660e+05,  2.94993800e+04,  2.70113963e+04]], [[  1.60324200e+04,  7.59741000e+03,  7.70141000e+03,  3.09485000e+03,     1.06808000e+03,  4.87358000e+03,  5.45963000e+03,  4.06610000e+03,     2.58028000e+03,  2.48095000e+03,  5.10291000e+03,  6.02101000e+03,     5.13351000e+03,  1.02022000e+03,  6.88590000e+02,  6.77410000e+03,     9.48874000e+03,  3.25550000e+02,  5.29305027e+02],  [  3.83510000e+02,  4.99570000e+02,  8.53710000e+02,  7.35650000e+02,     9.08700000e+01,  1.34940000e+03,  5.08913000e+03,  2.79022000e+03,     8.90020000e+02,  1.01675000e+03,  5.84040000e+03,  5.19440000e+03,     5.73512000e+03,  3.35160000e+02,  1.80600000e+01,  8.41630000e+02,     1.15995000e+03,  7.16700000e+01,  6.53721848e+01],  [  9.23342400e+04,  1.05667560e+05,  1.50376030e+05,  1.35725200e+04,     4.49246000e+03,  2.24487800e+04,  1.43576270e+05,  7.25355900e+04,     1.30347000e+04,  1.46246400e+04,  1.51297710e+05,  1.53791377e+05,     1.42320822e+05,  4.40468000e+03,  4.67573875e+03,  1.24780610e+05,     1.28989720e+05,  2.47147000e+03,  1.59202408e+03],  [  2.05751670e+05,  1.48488550e+05,  1.33103930e+05,  4.00349100e+04,     4.61945300e+04,  4.62629500e+04,  1.67391280e+05,  8.79658800e+04,     4.00741000e+03,  7.16882000e+03,  2.12251380e+05,  2.64520351e+05,     1.66206550e+05,  1.86088800e+04,  4.61581919e+04,  1.39758710e+05,     1.54262990e+05,  2.40100900e+04,  2.19850741e+04]], [[  1.36178400e+04,  7.44625000e+03,  7.42908000e+03,  2.82975000e+03,     1.32719000e+03,  4.63017000e+03,  5.21628000e+03,  4.06698000e+03,     2.76985000e+03,  2.61296000e+03,  3.59156000e+03,  5.81889000e+03,     4.92054000e+03,  1.10083000e+03,  7.97550000e+02,  6.72865000e+03,     9.57976000e+03,  1.27772000e+03,  2.07741858e+03],  [  4.32250000e+02,  4.93560000e+02,  8.41190000e+02,  8.00050000e+02,     1.06900000e+02,  1.44621000e+03,  5.15100000e+03,  2.85324000e+03,     9.59200000e+02,  1.07505000e+03,  6.00952000e+03,  5.18195000e+03,     5.90090000e+03,  3.38580000e+02,  2.63000000e+01,  8.21650000e+02,     1.14254000e+03,  8.43000000e+01,  7.68923563e+01],  [  7.03910200e+04,  8.40759700e+04,  1.28905160e+05,  1.37432200e+04,     4.86402000e+03,  2.42668600e+04,  1.43447810e+05,  7.25148700e+04,     1.41023500e+04,  1.58344300e+04,  1.47608480e+05,  1.53422768e+05,     1.46434763e+05,  4.11433000e+03,  4.04297598e+03,  1.00793200e+05,     1.12582660e+05,  3.01687000e+03,  1.94334937e+03],  [  1.83157480e+05,  1.31272820e+05,  1.23071950e+05,  3.47553700e+04,     4.22250400e+04,  4.30196400e+04,  1.66390730e+05,  8.42615700e+04,     4.16346000e+03,  7.91623000e+03,  2.11517100e+05,  2.63886346e+05,     1.71010935e+05,  1.60905600e+04,  3.99116527e+04,  1.30193170e+05,     1.51400670e+05,  2.42845700e+04,  2.22364044e+04]], [[  1.25415400e+04,  7.47287000e+03,  7.08224000e+03,  2.77632000e+03,     8.92000000e+02,  5.06740000e+03,  4.98707000e+03,  4.05941000e+03,     2.89360000e+03,  2.65658000e+03,  4.16800000e+03,  4.99516000e+03,     4.78416000e+03,  8.22680000e+02,  8.86800000e+02,  6.30897000e+03,     9.38604000e+03,  8.42900000e+02,  1.37045372e+03],  [  5.46610000e+02,  4.51820000e+02,  8.19800000e+02,  8.52910000e+02,     1.18340000e+02,  1.52533000e+03,  5.18075000e+03,  2.90114000e+03,     1.01761000e+03,  1.12454000e+03,  5.90148000e+03,  5.32251000e+03,     6.00620000e+03,  3.43740000e+02,  1.86700000e+01,  8.14670000e+02,     1.14091000e+03,  1.00470000e+02,  9.16414595e+01],  [  5.25195500e+04,  6.61739200e+04,  1.10816940e+05,  1.47378500e+04,     4.71765000e+03,  2.49527800e+04,  1.44674690e+05,  7.24553100e+04,     1.49927300e+04,  1.63436300e+04,  1.49417520e+05,  1.57584349e+05,     1.49047853e+05,  3.91286000e+03,  4.42998763e+03,  8.06386200e+04,     9.88501200e+04,  3.19744000e+03,  2.05966549e+03],  [  1.67815300e+05,  1.18651000e+05,  1.13523020e+05,  4.49638900e+04,     4.27664600e+04,  4.36954400e+04,  1.67278720e+05,  8.32684500e+04,     4.57648000e+03,  7.78939000e+03,  2.30056460e+05,  2.71044243e+05,     1.74062579e+05,  1.76308200e+04,  4.37321737e+04,  1.22434980e+05,     1.46363060e+05,  2.39726700e+04,  2.19508101e+04]], [[  1.02890500e+04,  7.26356000e+03,  6.91686000e+03,  3.17778000e+03,     1.55191000e+03,  4.97280000e+03,  4.69325000e+03,  4.04086000e+03,     3.08100000e+03,  2.72520000e+03,  2.37207000e+03,  4.98623000e+03,     4.49478000e+03,  8.49050000e+02,  5.66510000e+02,  6.14510000e+03,     9.28476000e+03,  9.16920000e+02,  1.49080131e+03],  [  3.84870000e+02,  4.36200000e+02,  8.04370000e+02,  9.29530000e+02,     1.42160000e+02,  1.62147000e+03,  5.30140000e+03,  2.98058000e+03,     1.09342000e+03,  1.18834000e+03,  6.27558000e+03,  5.38263000e+03,     6.15038000e+03,  3.48630000e+02,  1.33000000e+01,  7.98250000e+02,     1.14793000e+03,  1.23700000e+02,  1.12830184e+02],  [  2.87900000e+04,  4.22659200e+04,  8.69927100e+04,  1.64020900e+04,     6.06666000e+03,  2.68839400e+04,  1.44399390e+05,  7.28913700e+04,     1.60962900e+04,  1.74631500e+04,  1.47702170e+05,  1.59364331e+05,     1.52625775e+05,  4.06080000e+03,  4.70480746e+03,  5.40908700e+04,     8.05977400e+04,  3.33100000e+03,  2.14569960e+03],  [  1.50514750e+05,  9.96941100e+04,  1.03159740e+05,  4.50438200e+04,     5.13464600e+04,  4.26920000e+04,  1.63422050e+05,  8.60277400e+04,     4.58551000e+03,  8.13522000e+03,  2.09505680e+05,  2.74105802e+05,     1.78240986e+05,  1.87245700e+04,  4.64451539e+04,  1.11369890e+05,     1.41970450e+05,  2.34385500e+04,  2.14617379e+04]], [[  7.08648000e+03,  7.36929000e+03,  6.96330000e+03,  3.24204000e+03,     1.80302000e+03,  4.98057000e+03,  4.70306000e+03,  4.04065000e+03,     3.13356000e+03,  2.76120000e+03,  2.33940000e+02,  5.07203000e+03,     4.32873000e+03,  6.76500000e+02,  3.53630000e+02,  6.09769000e+03,     9.31687000e+03,  7.85260000e+02,  1.27673803e+03],  [  3.02110000e+02,  4.39960000e+02,  8.18730000e+02,  9.48570000e+02,     1.39650000e+02,  1.64959000e+03,  5.31725000e+03,  2.95789000e+03,     1.11264000e+03,  1.20467000e+03,  6.23918000e+03,  5.49289000e+03,     6.19594000e+03,  3.55220000e+02,  2.36700000e+01,  7.94260000e+02,     1.14289000e+03,  1.30290000e+02,  1.18841104e+02],  [  2.34983300e+04,  3.64295400e+04,  8.15892700e+04,  1.60939800e+04,     5.19969000e+03,  2.66591900e+04,  1.45164830e+05,  7.30079200e+04,     1.64086700e+04,  1.73241200e+04,  1.52073820e+05,  1.62628815e+05,     1.53756377e+05,  4.30907000e+03,  4.71154887e+03,  4.79618300e+04,     7.64869400e+04,  3.73869000e+03,  2.40831752e+03],  [  1.42324850e+05,  9.64410700e+04,  9.84380300e+04,  4.05514200e+04,     4.77078700e+04,  4.32118600e+04,  1.65001160e+05,  9.02270600e+04,     4.23846000e+03,  7.75149000e+03,  2.30869860e+05,  2.79720698e+05,     1.79561336e+05,  1.87514000e+04,  4.65117041e+04,  1.09261970e+05,     1.41760460e+05,  3.07945100e+04,  2.81972947e+04]], [[  9.96289000e+03,  7.89035000e+03,  6.93085000e+03,  2.28671000e+03,     9.39850000e+02,  4.73203000e+03,  4.99993000e+03,  4.09594000e+03,     2.89620000e+03,  2.62152000e+03,  2.53707000e+03,  5.25181000e+03,     4.64377000e+03,  8.31150000e+02,  7.33940000e+02,  6.35318000e+03,     9.56899000e+03,  5.57630000e+02,  9.06639110e+02],  [  3.63100000e+02,  4.81690000e+02,  8.35680000e+02,  8.47940000e+02,     1.13510000e+02,  1.51819000e+03,  5.23070000e+03,  2.88500000e+03,     1.01508000e+03,  1.12367000e+03,  6.04220000e+03,  5.31129000e+03,     5.99612000e+03,  3.41980000e+02,  1.64500000e+01,  8.18400000e+02,     1.15905000e+03,  1.03620000e+02,  9.45146615e+01],  [  5.52086900e+04,  6.90090900e+04,  1.13834580e+05,  1.42408900e+04,     5.54953000e+03,  2.53046000e+04,  1.44798700e+05,  7.26437800e+04,     1.49225200e+04,  1.61961600e+04,  1.50123270e+05,  1.57252157e+05,     1.48797711e+05,  3.93486000e+03,  4.72803680e+03,  8.38004100e+04,     1.01219740e+05,  3.50563000e+03,  2.25818940e+03],  [  1.72510730e+05,  1.21155010e+05,  1.15717930e+05,  4.63488000e+04,     4.64395400e+04,  4.57150100e+04,  1.66751910e+05,  8.35355500e+04,     4.36224000e+03,  8.13844000e+03,  2.40361330e+05,  2.70472874e+05,     1.73770456e+05,  1.88170200e+04,  4.66744705e+04,  1.24080030e+05,     1.47606920e+05,  2.15389500e+04,  1.97223506e+04]], [[  1.47836700e+04,  7.96811000e+03,  7.52564000e+03,  2.64259000e+03,     8.69450000e+02,  4.63126000e+03,  5.33564000e+03,  4.05962000e+03,     2.70046000e+03,  2.58377000e+03,  5.27011000e+03,  6.12082000e+03,     5.11293000e+03,  9.32410000e+02,  5.44300000e+02,  6.63781000e+03,     9.55836000e+03,  9.78120000e+02,  1.59030512e+03],  [  4.24890000e+02,  5.15890000e+02,  8.51180000e+02,  7.78390000e+02,     1.03740000e+02,  1.41338000e+03,  5.14373000e+03,  2.83732000e+03,     9.38170000e+02,  1.06036000e+03,  5.92095000e+03,  5.12372000e+03,     5.86833000e+03,  3.39480000e+02,  1.99400000e+01,  8.37110000e+02,     1.16056000e+03,  8.57700000e+01,  7.82331839e+01],  [  7.96534600e+04,  9.44447100e+04,  1.39404280e+05,  1.39181700e+04,     4.65677000e+03,  2.39347900e+04,  1.45192440e+05,  7.30247500e+04,     1.37732400e+04,  1.49437500e+04,  1.51845080e+05,  1.51698744e+05,     1.45626517e+05,  4.04570000e+03,  5.06574546e+03,  1.12263130e+05,     1.20672610e+05,  3.28521000e+03,  2.11620348e+03],  [  1.99063900e+05,  1.40879330e+05,  1.28293520e+05,  3.18614600e+04,     4.17840300e+04,  5.20134500e+04,  1.77627800e+05,  8.89046600e+04,     4.16417000e+03,  8.12351000e+03,  2.47009270e+05,  2.60921033e+05,     1.70067040e+05,  2.01610600e+04,  5.00082797e+04,  1.36151400e+05,     1.54065350e+05,  2.81897600e+04,  2.58122299e+04]], [[  1.39929200e+04,  8.36748000e+03,  8.10747000e+03,  2.91217000e+03,     1.24824000e+03,  4.28181000e+03,  5.61427000e+03,  4.08698000e+03,     2.54264000e+03,  2.49037000e+03,  8.45426000e+03,  6.24326000e+03,     5.16787000e+03,  9.68290000e+02,  8.19200000e+02,  6.94986000e+03,     9.68210000e+03,  7.52830000e+02,  1.22401076e+03],  [  5.11920000e+02,  5.25050000e+02,  8.71100000e+02,  7.20020000e+02,     7.77200000e+01,  1.32578000e+03,  5.09950000e+03,  2.79049000e+03,     8.68030000e+02,  1.00261000e+03,  5.89377000e+03,  5.12665000e+03,     5.75860000e+03,  3.45480000e+02,  1.40000000e+01,  8.54000000e+02,     1.17728000e+03,  6.16800000e+01,  5.62600301e+01],  [  1.04778410e+05,  1.18169760e+05,  1.62889810e+05,  1.36896300e+04,     3.58885000e+03,  2.30043700e+04,  1.45229330e+05,  7.26575800e+04,     1.27065500e+04,  1.46832600e+04,  1.51449530e+05,  1.51785493e+05,     1.42903494e+05,  4.31540000e+03,  4.27296783e+03,  1.38125150e+05,     1.38588330e+05,  3.05206000e+03,  1.96601739e+03],  [  2.17483160e+05,  1.61929980e+05,  1.40593620e+05,  3.75699000e+04,     5.27630700e+04,  3.75777700e+04,  1.69150950e+05,  8.81854600e+04,     4.29112000e+03,  7.73198000e+03,  2.16407850e+05,  2.61070241e+05,     1.66887012e+05,  1.70059000e+04,  4.21820978e+04,  1.47300590e+05,     1.60350120e+05,  2.38313600e+04,  2.18214182e+04]], [[  1.19116700e+04,  8.69402000e+03,  8.12713000e+03,  3.18876000e+03,     7.64690000e+02,  4.16779000e+03,  5.64616000e+03,  4.19037000e+03,     2.54714000e+03,  2.50531000e+03,  5.04312000e+03,  6.55071000e+03,     5.50063000e+03,  9.81670000e+02,  5.99880000e+02,  6.94439000e+03,     9.90928000e+03,  7.52540000e+02,  1.22353926e+03],  [  5.81630000e+02,  5.12840000e+02,  8.88630000e+02,  7.17770000e+02,     7.78600000e+01,  1.32287000e+03,  5.10625000e+03,  2.81299000e+03,     8.68050000e+02,  1.00282000e+03,  5.76721000e+03,  5.15655000e+03,     5.76493000e+03,  3.45080000e+02,  2.14400000e+01,  8.54460000e+02,     1.17221000e+03,  6.74600000e+01,  6.15321276e+01],  [  1.04674790e+05,  1.18564370e+05,  1.63562990e+05,  1.32022000e+04,     4.86661000e+03,  2.27990700e+04,  1.45739100e+05,  7.34897100e+04,     1.27013200e+04,  1.46105900e+04,  1.51923190e+05,  1.52670746e+05,     1.43060577e+05,  4.32696000e+03,  4.08233144e+03,  1.38840550e+05,     1.39127160e+05,  2.63726000e+03,  1.69881949e+03],  [  2.26320910e+05,  1.60647110e+05,  1.40786520e+05,  4.39355900e+04,     3.21348100e+04,  3.85039500e+04,  1.69786570e+05,  9.05018600e+04,     4.30621000e+03,  7.50077000e+03,  2.18869470e+05,  2.62592872e+05,     1.67070458e+05,  1.62471900e+04,  4.03001639e+04,  1.47624650e+05,     1.60007410e+05,  2.05437500e+04,  1.88110859e+04]], [[  1.26484800e+04,  8.19516000e+03,  8.02176000e+03,  2.28820000e+03,     8.01140000e+02,  3.96479000e+03,  5.82676000e+03,  4.11355000e+03,     2.39663000e+03,  2.43050000e+03,  6.44254000e+03,  6.54708000e+03,     5.52717000e+03,  1.01594000e+03,  5.51510000e+02,  7.34929000e+03,     9.71131000e+03,  5.96770000e+02,  9.70276028e+02],  [  4.30350000e+02,  5.39270000e+02,  8.83620000e+02,  6.72770000e+02,     7.18900000e+01,  1.25122000e+03,  5.03379000e+03,  2.77954000e+03,     8.12890000e+02,  9.57310000e+02,  5.64017000e+03,  5.15230000e+03,     5.66458000e+03,  3.48310000e+02,  1.26900000e+01,  8.69910000e+02,     1.17518000e+03,  5.86100000e+01,  5.34597984e+01],  [  1.23325730e+05,  1.36916950e+05,  1.82281640e+05,  1.19482400e+04,     4.64788000e+03,  2.17830700e+04,  1.45782420e+05,  7.29980800e+04,     1.19133500e+04,  1.37933400e+04,  1.52935400e+05,  1.52544916e+05,     1.40570325e+05,  4.37873000e+03,  4.51993506e+03,  1.59502840e+05,     1.53486110e+05,  2.36472000e+03,  1.52325991e+03],  [  2.35454060e+05,  1.71539820e+05,  1.49501350e+05,  4.05425100e+04,     4.65714800e+04,  4.86695100e+04,  1.63671610e+05,  8.76937800e+04,     4.07521000e+03,  7.69113000e+03,  2.38007290e+05,  2.62376445e+05,     1.64162267e+05,  1.79888000e+04,  4.46201213e+04,  1.56449380e+05,     1.64497550e+05,  1.80573900e+04,  1.65344260e+04]], [[  7.69077000e+03,  8.52355000e+03,  7.86868000e+03,  2.67552000e+03,     1.35316000e+03,  4.41582000e+03,  5.68588000e+03,  4.10526000e+03,     2.53264000e+03,  2.45487000e+03,  5.43399000e+03,  5.93604000e+03,     5.43022000e+03,  1.09989000e+03,  4.60310000e+02,  6.98631000e+03,     9.91988000e+03,  4.18440000e+02,  6.80332961e+02],  [  4.56520000e+02,  5.23740000e+02,  8.65360000e+02,  7.12490000e+02,     8.64800000e+01,  1.31836000e+03,  5.11508000e+03,  2.77744000e+03,     8.59480000e+02,  9.96670000e+02,  5.76424000e+03,  5.08226000e+03,     5.73938000e+03,  3.44330000e+02,  2.25800000e+01,  8.63220000e+02,     1.17824000e+03,  7.19400000e+01,  6.56184592e+01],  [  1.09248700e+05,  1.22858680e+05,  1.67906880e+05,  1.26061100e+04,     5.55923000e+03,  2.20273600e+04,  1.46543870e+05,  7.36990900e+04,     1.25719800e+04,  1.41090600e+04,  1.50765120e+05,  1.50471231e+05,     1.42426537e+05,  4.40610000e+03,  3.88274251e+03,  1.43503250e+05,     1.42565800e+05,  2.62751000e+03,  1.69253893e+03],  [  2.15585030e+05,  1.63530200e+05,  1.43079180e+05,  4.38253900e+04,     4.31946700e+04,  4.65017200e+04,  1.69552280e+05,  8.46528800e+04,     4.26770000e+03,  8.13335000e+03,  2.22557420e+05,  2.58809718e+05,     1.66330007e+05,  1.54528500e+04,  3.83298520e+04,  1.49460470e+05,     1.60903360e+05,  2.20198400e+04,  2.01626822e+04]], [[  1.01599500e+04,  7.93493000e+03,  7.43233000e+03,  2.66439000e+03,     1.49887000e+03,  4.21981000e+03,  5.45449000e+03,  4.05933000e+03,     2.64761000e+03,  2.54921000e+03,  7.57138000e+03,  5.79453000e+03,     5.17235000e+03,  1.08681000e+03,  6.47670000e+02,  6.82042000e+03,     9.55465000e+03,  7.12780000e+02,  1.15889429e+03],  [  4.76790000e+02,  4.91750000e+02,  8.73680000e+02,  7.56060000e+02,     8.26800000e+01,  1.38501000e+03,  5.17580000e+03,  2.83928000e+03,     9.13660000e+02,  1.04234000e+03,  5.96287000e+03,  5.25216000e+03,     5.85744000e+03,  3.41470000e+02,  1.62900000e+01,  8.55590000e+02,     1.17990000e+03,  7.73100000e+01,  7.05165844e+01],  [  9.21330000e+04,  1.05844150e+05,  1.51034900e+05,  1.32850300e+04,     4.18655000e+03,  2.35978800e+04,  1.46470760e+05,  7.32884500e+04,     1.33971500e+04,  1.46248400e+04,  1.50837920e+05,  1.55501486e+05,     1.45356274e+05,  4.62083000e+03,  4.27965396e+03,  1.24669930e+05,     1.29659300e+05,  2.19942000e+03,  1.41678013e+03],  [  2.07662450e+05,  1.51211940e+05,  1.35858170e+05,  3.62676500e+04,     4.29424400e+04,  5.23083800e+04,  1.73787650e+05,  8.88208800e+04,     4.35253000e+03,  7.81394000e+03,  2.34169200e+05,  2.67461729e+05,     1.69751443e+05,  1.70325100e+04,  4.22481023e+04,  1.42588310e+05,     1.57401150e+05,  2.39174000e+04,  2.19002016e+04]], [[  1.23021600e+04,  8.45057000e+03,  7.41762000e+03,  3.22004000e+03,     1.19194000e+03,  4.67021000e+03,  5.35026000e+03,  4.15113000e+03,     2.73296000e+03,  2.62589000e+03,  4.63048000e+03,  6.02882000e+03,     5.10632000e+03,  9.56420000e+02,  4.86670000e+02,  6.85906000e+03,     9.98589000e+03,  4.78780000e+02,  7.78438522e+02],  [  4.21100000e+02,  5.21050000e+02,  8.60010000e+02,  7.85710000e+02,     8.87900000e+01,  1.43566000e+03,  5.20391000e+03,  2.86327000e+03,     9.48850000e+02,  1.07194000e+03,  5.95159000e+03,  5.25262000e+03,     5.91965000e+03,  3.43660000e+02,  1.96600000e+01,  8.47200000e+02,     1.17009000e+03,  9.02600000e+01,  8.23286368e+01],  [  8.04871200e+04,  9.49223900e+04,  1.40321590e+05,  1.38709500e+04,     4.33068000e+03,  2.46661000e+04,  1.46935480e+05,  7.37967900e+04,     1.39118100e+04,  1.56313800e+04,  1.52700420e+05,  1.55515105e+05,     1.46900057e+05,  4.17936000e+03,  4.34316592e+03,  1.12806730e+05,     1.21572280e+05,  3.82988000e+03,  2.46705854e+03],  [  2.01365320e+05,  1.43635020e+05,  1.29182920e+05,  3.31469500e+04,     3.44982400e+04,  3.76993500e+04,  1.69954100e+05,  8.91276600e+04,     4.38582000e+03,  7.45019000e+03,  2.29290860e+05,  2.67485155e+05,     1.71554319e+05,  1.72852800e+04,  4.28750828e+04,  1.37647470e+05,     1.55307170e+05,  2.21606200e+04,  2.02915888e+04]], [[  1.22732800e+04,  8.11515000e+03,  7.66434000e+03,  2.55924000e+03,     1.04728000e+03,  4.54280000e+03,  5.43691000e+03,  4.13988000e+03,     2.71049000e+03,  2.56523000e+03,  3.80459000e+03,  5.95058000e+03,     5.14192000e+03,  1.02812000e+03,  3.92320000e+02,  6.77369000e+03,     9.71709000e+03,  7.45670000e+02,  1.21236946e+03],  [  3.90870000e+02,  4.85630000e+02,  8.50260000e+02,  7.77230000e+02,     1.04520000e+02,  1.41234000e+03,  5.22031000e+03,  2.86982000e+03,     9.37510000e+02,  1.06329000e+03,  5.96021000e+03,  5.30294000e+03,     5.91076000e+03,  3.46500000e+02,  2.69100000e+01,  8.49140000e+02,     1.17851000e+03,  8.18000000e+01,  7.46120373e+01],  [  8.45248000e+04,  9.91906000e+04,  1.44878870e+05,  1.37648400e+04,     4.06219000e+03,  2.36693100e+04,  1.46589590e+05,  7.39883100e+04,     1.37885300e+04,  1.53161800e+04,  1.53110290e+05,  1.57004937e+05,     1.46679445e+05,  4.45160000e+03,  4.63671998e+03,  1.17572120e+05,     1.24820040e+05,  3.10985000e+03,  2.00324345e+03],  [  1.97290210e+05,  1.44596810e+05,  1.33155960e+05,  3.54567400e+04,     3.88821800e+04,  4.90165900e+04,  1.71416290e+05,  8.73267600e+04,     4.27508000e+03,  8.36033000e+03,  2.37015750e+05,  2.70047657e+05,     1.71296682e+05,  1.84535900e+04,  4.57730045e+04,  1.39576790e+05,     1.56454870e+05,  1.87989500e+04,  1.72134427e+04]]],[historic_time, sales_channels, product_families])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_sales_sales_chn_prod_family", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historical Sales by Sales Channel and Product Family", "units": null, "w": "184", "x": "57", "y": "165", "z": 1}, {"color": "#9999ff", "definition": "_list = []\n\nfor i in range(1,20):\n    _list.append( 'Product Family ' + str(i) )\n\nresult = pd.Index( _list )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "product_families", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Product Families", "units": null, "w": "100", "x": "143", "y": "61", "z": 1}, {"color": "#4CBCFF", "definition": "result = np.transpose( cdm_hist_sales_sales_chn_prod_family.values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_historical_sales", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historical Sales", "units": null, "w": "184", "x": "289", "y": "165", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Yes\",\"No\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "yes_no", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Yes / No", "units": null, "w": "100", "x": "345", "y": "61", "z": 1}, {"color": "#9999ff", "definition": "result = subset( cdm_ind_variables_sel == 'Yes' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "independent_variables_chosen", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Independent Variables Chosen", "units": null, "w": "100", "x": "41", "y": "123", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Dependant and Independant Variables", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node115", "moduleId": "inputs", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": "38", "y": "129", "z": -1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "OLS Linear Regression", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node115_copy", "moduleId": "ols_linear_regression", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 22, "y": 22, "z": -1}, {"color": "#4cffa6", "definition": "result = choice( product_families,1, False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_choice_product_family", "moduleId": "inputs", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Product Family", "units": null, "w": "140", "x": "90", "y": "486", "z": 1}, {"color": "#4CFFA6", "definition": "result = cdm_choice_product_family", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a4a166db2bbbd4520b8fab9a5f6b4f036", "moduleId": "inputs", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "cdm_choice_product_family", "picture": null, "title": "Product Family", "units": null, "w": "224", "x": "62", "y": "486", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[842.0,848.0,855.0,861.0,868.0,875.0,881.0,888.0,895.0,902.0,909.0,916.0,  923.0,925.0,927.0,930.0,932.0,934.0,936.0,939.0,941.0,943.0,946.0,948.0,  950.0,952.0,954.0,955.0,957.0,959.0,961.0,962.0,964.0,966.0,968.0,970.0,  971.0,973.0,975.0,977.0,979.0,980.0,982.0,984.0,986.0,988.0,989.0,991.0,  993.0,995.0,997.0,999.0,1000.0,1002.0,1004.0,1006.0,1008.0,1010.0,  1012.0,1013.0,1015.0,1017.0,1019.0,1021.0,1023.0,1025.0,1027.0,1029.0,  1030.0,1032.0,1034.0,1036.0,1015.0,1017.0,1019.0,1021.0,1023.0,1025.0,  1027.0,1029.0,1030.0,1032.0,1034.0,1036.0,1015.0,1017.0,1019.0,1021.0,  1023.0,1025.0,1027.0,1029.0,1030.0,1032.0,1034.0,1036.0,1015.0,1017.0,  1019.0,1021.0,1023.0,1025.0,1027.0,1029.0,1030.0,1032.0,1034.0,1036.0], [115000.0,115165.353,115330.943,115496.772,115662.839,115829.145,  115995.69,116162.474,116329.498,116496.762,116664.267,116832.013,  117000.0,117124.272,117248.675,117373.211,117497.878,117622.679,  117747.611,117872.677,117997.875,118123.207,118248.671,118374.269,  118500.0,118600.777,118701.64,118802.589,118903.624,119004.744,  119105.951,119207.243,119308.622,119410.087,119511.638,119613.276,  119715.0,119816.811,119918.708,120020.692,120122.762,120224.919,  120327.164,120429.495,120531.913,120634.418,120737.011,120839.69,  120942.458,121045.312,121148.254,121251.283,121354.401,121457.605,  121560.898,121664.278,121767.747,121871.303,121974.947,122078.68,  122182.5,122286.409,122390.407,122494.493,122598.667,122702.93,  122807.282,122911.722,123016.251,123120.869,123225.576,123330.373,  122182.5,122286.409,122390.407,122494.493,122598.667,122702.93,  122807.282,122911.722,123016.251,123120.869,123225.576,123330.373,  122182.5,122286.409,122390.407,122494.493,122598.667,122702.93,  122807.282,122911.722,123016.251,123120.869,123225.576,123330.373,  122182.5,122286.409,122390.407,122494.493,122598.667,122702.93,  122807.282,122911.722,123016.251,123120.869,123225.576,123330.373], [18.6,19.5,21.6,20.3,24.2,21.5,23.3,21.8,18.6,19.5,21.6,20.3,24.2,21.5,  23.3,21.8,18.8,18.7,18.2,16.3,17.7,18.9,19.4,21.3,22.9,24.98,25.5,22.8,  20.67,18.73,18.72,17.19,18.46,19.95,20.91,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59]],[independent_variables, historic_projected_totaltime])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_proj_independent_variables", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historical and Projected Independent Variables", "units": null, "w": "184", "x": "59", "y": "210", "z": 1}, {"color": null, "definition": "result = concat_index( historic_time, time )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "historic_projected_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historic & Projected Time", "units": null, "w": "100", "x": "166", "y": "243", "z": 1}, {"color": "#4CBCFF", "definition": "_historic_data = change_index( cdm_hist_proj_independent_variables, historic_projected_totaltime, historic_time )\n_chosen_variables = change_index( _historic_data, independent_variables, independent_variables_chosen )\n\n_df = _chosen_variables.to_dataframe( 'value' ).pivot_table( values = 'value', index = 'historic_time', columns = 'independent_variables_chosen' ).reset_index()#.drop( columns = 'historic_time')\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_independent_variables", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historical Independent Variables", "units": null, "w": "184", "x": "289", "y": "210", "z": 1}, {"color": "#4CBCFF", "definition": "_projected_data = change_index( cdm_hist_proj_independent_variables, historic_projected_totaltime, projected_time )\n_chosen_variables = change_index( _projected_data, independent_variables, independent_variables_chosen )\n\n_df = _chosen_variables.to_dataframe( 'value' ).pivot_table( values = 'value', index = 'projected_time', columns = 'independent_variables_chosen' ).reset_index()#.drop( columns = 'projected_time')\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_proj_independent_variables", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projected Independent Variables", "units": null, "w": "184", "x": "289", "y": "257", "z": 1}, {"color": null, "definition": "result = subset( get_pos(time) > 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "projected_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projected Time", "units": null, "w": "100", "x": "813", "y": "175", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "ARIMA", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node117", "moduleId": "arima", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 32, "y": 39, "z": -1}, {"color": "#CCCCCC", "definition": "result = subscript( cdm_arima_model_results.Summary, [product_families, sales_channels], [cdm_choice_product_family, cdm_choice_sales_channel] ).values.tolist()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_summary", "moduleId": "arima", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Summary", "units": null, "w": "184", "x": 281, "y": 163, "z": 1}, {"color": "#CCCCCC", "definition": "result = subscript( cdm_ols_linear_reg_model_results.Summary, [product_families, sales_channels], [cdm_choice_product_family, cdm_choice_sales_channel] ).values.tolist()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_summary", "moduleId": "ols_linear_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Summary", "units": null, "w": "184", "x": 272, "y": 150, "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "OLS Quadratic Regression", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node118", "moduleId": "ols_quadratic_regression", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 13, "y": 26, "z": -1}, {"color": "#CCCCCC", "definition": "result = subscript( cdm_ols_quad_reg_model_results.Summary, [product_families, sales_channels], [cdm_choice_product_family, cdm_choice_sales_channel] ).values.tolist()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_summary", "moduleId": "ols_quadratic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression Summary", "units": null, "w": "184", "x": 263, "y": 151, "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "OLS Cubic Regression", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node119", "moduleId": "ols_cubic_regression", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 23, "y": 20, "z": -1}, {"color": "#CCCCCC", "definition": "result = subscript( cdm_ols_cubic_reg_model_results.Summary, [product_families, sales_channels], [cdm_choice_product_family, cdm_choice_sales_channel] ).values.tolist()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_summary", "moduleId": "ols_cubic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression Summary", "units": null, "w": "184", "x": 272, "y": 148, "z": 1}, {"color": null, "definition": "result = pd.Index(['Linear Regression','Quadratic Regression','Cubic Regression','ARIMA'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_models", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression Models", "units": null, "w": "100", "x": "143", "y": "123", "z": 1}, {"color": "#CCCCCC", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = np.nan )\n\nresult = xr.concat( [_observed_data,cdm_ols_linear_reg_model_results.Regression,cdm_ols_quad_reg_model_results.Regression,cdm_ols_cubic_reg_model_results.Regression,cdm_arima_model_results.Regression], dim = regression_models_observed_data )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_prediction_comp", "moduleId": "models_comparison", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Predictions Comparison", "units": null, "w": "184", "x": 46, "y": 50, "z": 1}, {"color": "#d9ead3", "definition": "result = 0", "description": "Library used: Statsmodels\n( https://www.statsmodels.org/stable/index.html )", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "node124", "moduleId": "ex_regressions", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "296", "x": 377, "y": 340, "z": -1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray(['Yes','Yes','Yes'], [independent_variables])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ind_variables_sel", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Independent Variables Selection", "units": null, "w": "184", "x": "59", "y": "346", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[  1.    ,  0.8165,  0.7649,  0.7407,  0.7267,  0.7176,  0.7111,  0.7064,    0.7027,  0.6998,  0.6974,  0.6955,  0.6938,  0.6924,  0.6912,  0.6901,    0.6892,  0.6884,  0.6876,  0.687 ,  0.6864,  0.6858,  0.6853,  0.6848,    0.6844,  0.684 ,  0.6837,  0.6834,  0.683 ,  0.6828,  0.6825,  0.6822,    0.682 ,  0.6818,  0.6816,  0.6814,  0.6812,  0.681 ,  0.6808,  0.6807,    0.6805,  0.6804,  0.6802,  0.6801,  0.68  ,  0.6799,  0.6797,  0.6796,    0.6795,  0.6794,  0.6793,  0.6792,  0.6791,  0.6791,  0.679 ,  0.6789,    0.6788,  0.6787,  0.6787,  0.6786,  0.6785,  0.6785,  0.6784,  0.6783,    0.6783,  0.6782,  0.6782,  0.6781,  0.6781,  0.678 ,  0.678 ,  0.6779,    0.6779,  0.6778,  0.6778,  0.6777,  0.6777,  0.6776,  0.6776,  0.6776,    0.6775,  0.6775,  0.6775,  0.6774,  0.6774,  0.6774,  0.6773,  0.6773,    0.6773,  0.6772,  0.6772,  0.6772,  0.6771,  0.6771,  0.6771,  0.6771,    0.677 ,  0.677 ,  0.677 ,  0.677 ,  0.6745], [  3.0777,  1.8856,  1.6377,  1.5332,  1.4759,  1.4398,  1.4149,  1.3968,    1.383 ,  1.3722,  1.3634,  1.3562,  1.3502,  1.345 ,  1.3406,  1.3368,    1.3334,  1.3304,  1.3277,  1.3253,  1.3232,  1.3212,  1.3195,  1.3178,    1.3163,  1.315 ,  1.3137,  1.3125,  1.3114,  1.3104,  1.3095,  1.3086,    1.3077,  1.307 ,  1.3062,  1.3055,  1.3049,  1.3042,  1.3036,  1.3031,    1.3025,  1.302 ,  1.3016,  1.3011,  1.3007,  1.3002,  1.2998,  1.2994,    1.2991,  1.2987,  1.2984,  1.298 ,  1.2977,  1.2974,  1.2971,  1.2969,    1.2966,  1.2963,  1.2961,  1.2958,  1.2956,  1.2954,  1.2951,  1.2949,    1.2947,  1.2945,  1.2943,  1.2941,  1.2939,  1.2938,  1.2936,  1.2934,    1.2933,  1.2931,  1.2929,  1.2928,  1.2926,  1.2925,  1.2924,  1.2922,    1.2921,  1.292 ,  1.2918,  1.2917,  1.2916,  1.2915,  1.2914,  1.2912,    1.2911,  1.291 ,  1.2909,  1.2908,  1.2907,  1.2906,  1.2905,  1.2904,    1.2903,  1.2903,  1.2902,  1.2901,  1.2816], [  6.3137,  2.92  ,  2.3534,  2.1318,  2.015 ,  1.9432,  1.8946,  1.8595,    1.8331,  1.8125,  1.7959,  1.7823,  1.7709,  1.7613,  1.7531,  1.7459,    1.7396,  1.7341,  1.7291,  1.7247,  1.7207,  1.7171,  1.7139,  1.7109,    1.7081,  1.7056,  1.7033,  1.7011,  1.6991,  1.6973,  1.6955,  1.6939,    1.6924,  1.6909,  1.6896,  1.6883,  1.6871,  1.686 ,  1.6849,  1.6839,    1.6829,  1.682 ,  1.6811,  1.6802,  1.6794,  1.6787,  1.6779,  1.6772,    1.6766,  1.6759,  1.6753,  1.6747,  1.6741,  1.6736,  1.673 ,  1.6725,    1.672 ,  1.6716,  1.6711,  1.6706,  1.6702,  1.6698,  1.6694,  1.669 ,    1.6686,  1.6683,  1.6679,  1.6676,  1.6672,  1.6669,  1.6666,  1.6663,    1.666 ,  1.6657,  1.6654,  1.6652,  1.6649,  1.6646,  1.6644,  1.6641,    1.6639,  1.6636,  1.6634,  1.6632,  1.663 ,  1.6628,  1.6626,  1.6624,    1.6622,  1.662 ,  1.6618,  1.6616,  1.6614,  1.6612,  1.6611,  1.6609,    1.6607,  1.6606,  1.6604,  1.6602,  1.6449], [ 12.7062,  4.3027,  3.1824,  2.7765,  2.5706,  2.4469,  2.3646,  2.306 ,    2.2622,  2.2281,  2.201 ,  2.1788,  2.1604,  2.1448,  2.1315,  2.1199,    2.1098,  2.1009,  2.093 ,  2.086 ,  2.0796,  2.0739,  2.0687,  2.0639,    2.0595,  2.0555,  2.0518,  2.0484,  2.0452,  2.0423,  2.0395,  2.0369,    2.0345,  2.0322,  2.0301,  2.0281,  2.0262,  2.0244,  2.0227,  2.0211,    2.0195,  2.0181,  2.0167,  2.0154,  2.0141,  2.0129,  2.0117,  2.0106,    2.0096,  2.0086,  2.0076,  2.0066,  2.0057,  2.0049,  2.004 ,  2.0032,    2.0025,  2.0017,  2.001 ,  2.0003,  1.9996,  1.999 ,  1.9983,  1.9977,    1.9971,  1.9966,  1.996 ,  1.9955,  1.9949,  1.9944,  1.9939,  1.9935,    1.993 ,  1.9925,  1.9921,  1.9917,  1.9913,  1.9908,  1.9905,  1.9901,    1.9897,  1.9893,  1.989 ,  1.9886,  1.9883,  1.9879,  1.9876,  1.9873,    1.987 ,  1.9867,  1.9864,  1.9861,  1.9858,  1.9855,  1.9852,  1.985 ,    1.9847,  1.9845,  1.9842,  1.984 ,  1.96  ], [ 31.821 ,  6.9645,  4.5407,  3.7469,  3.3649,  3.1427,  2.9979,  2.8965,    2.8214,  2.7638,  2.7181,  2.681 ,  2.6503,  2.6245,  2.6025,  2.5835,    2.5669,  2.5524,  2.5395,  2.528 ,  2.5176,  2.5083,  2.4999,  2.4922,    2.4851,  2.4786,  2.4727,  2.4671,  2.462 ,  2.4573,  2.4528,  2.4487,    2.4448,  2.4411,  2.4377,  2.4345,  2.4314,  2.4286,  2.4258,  2.4233,    2.4208,  2.4185,  2.4163,  2.4141,  2.4121,  2.4102,  2.4083,  2.4066,    2.4049,  2.4033,  2.4017,  2.4002,  2.3988,  2.3974,  2.3961,  2.3948,    2.3936,  2.3924,  2.3912,  2.3901,  2.389 ,  2.388 ,  2.387 ,  2.386 ,    2.3851,  2.3842,  2.3833,  2.3824,  2.3816,  2.3808,  2.38  ,  2.3793,    2.3785,  2.3778,  2.3771,  2.3764,  2.3758,  2.3751,  2.3745,  2.3739,    2.3733,  2.3727,  2.3721,  2.3716,  2.371 ,  2.3705,  2.37  ,  2.3695,    2.369 ,  2.3685,  2.368 ,  2.3676,  2.3671,  2.3667,  2.3662,  2.3658,    2.3654,  2.365 ,  2.3646,  2.3642,  2.3263], [ 63.6559,  9.925 ,  5.8408,  4.6041,  4.0321,  3.7074,  3.4995,  3.3554,    3.2498,  3.1693,  3.1058,  3.0545,  3.0123,  2.9768,  2.9467,  2.9208,    2.8982,  2.8784,  2.8609,  2.8453,  2.8314,  2.8188,  2.8073,  2.797 ,    2.7874,  2.7787,  2.7707,  2.7633,  2.7564,  2.75  ,  2.744 ,  2.7385,    2.7333,  2.7284,  2.7238,  2.7195,  2.7154,  2.7116,  2.7079,  2.7045,    2.7012,  2.6981,  2.6951,  2.6923,  2.6896,  2.687 ,  2.6846,  2.6822,    2.68  ,  2.6778,  2.6757,  2.6737,  2.6718,  2.67  ,  2.6682,  2.6665,    2.6649,  2.6633,  2.6618,  2.6603,  2.6589,  2.6575,  2.6561,  2.6549,    2.6536,  2.6524,  2.6512,  2.6501,  2.649 ,  2.6479,  2.6469,  2.6458,    2.6449,  2.6439,  2.643 ,  2.6421,  2.6412,  2.6403,  2.6395,  2.6387,    2.6379,  2.6371,  2.6364,  2.6356,  2.6349,  2.6342,  2.6335,  2.6329,    2.6322,  2.6316,  2.6309,  2.6303,  2.6297,  2.6291,  2.6286,  2.628 ,    2.6275,  2.6269,  2.6264,  2.6259,  2.5758]], [level_of_significance_div_2, t_values])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_student_t_distrib_table", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Student's T Distribution Table", "units": null, "w": "184", "x": "59", "y": "439", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([0.25,0.1,0.05,0.025,0.01,0.005])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "level_of_significance_div_2", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Level of Significance / 2", "units": null, "w": "100", "x": "40", "y": "231", "z": 1}, {"color": "#9999ff", "definition": "_sequence = []\n\nfor number in range(1,101):\n    _sequence.append( str( number ) )\n\n_sequence.append( '> 100' )\n\nresult = pd.Index( _sequence )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "t_values", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "T Values", "units": null, "w": "100", "x": "143", "y": "231", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Other Parameters", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "362", "identifier": "node125", "moduleId": "inputs", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": "38", "y": "314", "z": -1}, {"color": "#9999ff", "definition": "result = copy_index( xr.DataArray(level_of_significance_div_2.values, [level_of_significance_div_2]) * 2 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "levels_of_significance", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Levels of Significance", "units": null, "w": "100", "x": "244", "y": "231", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(levels_of_significance,1,False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_choice_level_of_significance", "moduleId": "inputs", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Level of Significance", "units": null, "w": "176", "x": "115", "y": "392", "z": 1}, {"color": "#4CFFA6", "definition": "result = cdm_choice_level_of_significance", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab0751df935204758ba30aa71b1d79ee3", "moduleId": "inputs", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "cdm_choice_level_of_significance", "picture": null, "title": "Level of Significance", "units": null, "w": "256", "x": "62", "y": "392", "z": 1}, {"color": "#4CBCFF", "definition": "_df_aux = len( historic_time.values ) - len( independent_variables_chosen.values )\n_df = str ( _df_aux ) if _df_aux <= 100 else '> 100'\n_level_of_significance_div_2 = cdm_choice_level_of_significance / 2\n\nresult = np.asscalar( subscript( cdm_student_t_distrib_table, [t_values, level_of_significance_div_2], [_df, _level_of_significance_div_2] ).values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_t", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "t*", "units": null, "w": "184", "x": "289", "y": "439", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Observed Data / Regression','ICL','SCL'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_and_confid_levels", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression and Confidence Levels", "units": null, "w": "100", "x": "345", "y": "231", "z": 1}, {"color": "#4CBCFF", "definition": "from statsmodels.regression.linear_model import OLS\nfrom statsmodels.tools.tools import add_constant\n\n_dependent_var = cdm_historical_sales\n\n_hist_independent_vars = cdm_hist_independent_variables.iloc[:,1:]\nfor _variable in _hist_independent_vars.columns:\n    _hist_independent_vars[_variable + '**2'] = _hist_independent_vars[_variable] ** 2\n    _hist_independent_vars[_variable + '**3'] = _hist_independent_vars[_variable] ** 3\n_hist_independent_vars_w_constant = add_constant( _hist_independent_vars )\n\n_proj_independent_vars = cdm_proj_independent_variables.iloc[:,1:]\nfor _variable in _proj_independent_vars.columns:\n    _proj_independent_vars[_variable + '**2'] = _proj_independent_vars[_variable] ** 2\n    _proj_independent_vars[_variable + '**3'] = _proj_independent_vars[_variable] ** 3\n_proj_independent_vars_w_constant = add_constant( _proj_independent_vars )\n\n_historic_time_length = len( historic_time.values )\n_hist_predicts_array = np.empty( (0,_historic_time_length) )\n_proj_length = len( projected_time.values )\n_product_families_length = len( product_families.values )\n_sales_channels_length = len( sales_channels.values )\n_predicts_array = np.empty( (0, _proj_length) )\n_r_squared = []\n_adj_r_squared = []\n_std_dev_reg = []\n_log_lh = []\n_aic = []\n_bic = []\n_smry = []\n\nfor product in range( len(product_families.values) ):\n    for channel in range( len(sales_channels.values) ):\n        _model = OLS( _dependent_var[product, channel], _hist_independent_vars_w_constant ).fit()\n        _hist_predict = _model.predict( _hist_independent_vars_w_constant )\n        _hist_predicts_array = np.append( _hist_predicts_array, [_hist_predict], axis = 0 )\n        _predict = _model.predict( _proj_independent_vars_w_constant )\n        _predicts_array = np.append( _predicts_array, [_predict], axis = 0 )\n        _r_squared.append( _model.rsquared_adj )\n        _adj_r_squared.append( _model.rsquared_adj )\n        _std_dev_reg.append( np.sqrt( _model.scale ) )\n        _log_lh.append( _model.llf )\n        _aic.append( _model.aic )\n        _bic.append( _model.bic )\n        _smry.append( _model.summary() )\n\n_hist_predicts_array_aux = _hist_predicts_array.reshape(_product_families_length,_sales_channels_length,_historic_time_length)\n_predicts_array_aux = _predicts_array.reshape(_product_families_length,_sales_channels_length,_proj_length)\n_r_squared_aux = np.array(_r_squared).reshape(_product_families_length,_sales_channels_length)\n_adj_r_squared_aux = np.array(_adj_r_squared).reshape(_product_families_length,_sales_channels_length)\n_std_dev_reg_aux = np.array(_std_dev_reg).reshape(_product_families_length,_sales_channels_length)\n_log_lh_aux = np.array(_log_lh).reshape(_product_families_length,_sales_channels_length)\n_aic_aux = np.array(_aic).reshape(_product_families_length,_sales_channels_length)\n_bic_aux = np.array(_bic).reshape(_product_families_length,_sales_channels_length)\n_smry_aux = np.array(_smry).reshape(_product_families_length,_sales_channels_length)\n\n\n_hist_proj = xr.DataArray( _hist_predicts_array_aux, [product_families, sales_channels,historic_time] )\n_proj = create_dataarray( _predicts_array_aux, [product_families, sales_channels, projected_time] )\n_regression = change_index( _hist_proj, historic_time, historic_projected_time, defaultValue = 0. ) + change_index( _proj, projected_time, historic_projected_time, defaultValue = 0. )\n_r_squared = xr.DataArray( _r_squared_aux, [product_families, sales_channels] )\n_adjusted_r_squared = xr.DataArray( _adj_r_squared_aux, [product_families, sales_channels] )\n_std_dev_regression = xr.DataArray( _std_dev_reg_aux, [product_families, sales_channels] )\n_log_likelihood = xr.DataArray( _log_lh_aux, [product_families, sales_channels] )\n_akaike_ic = xr.DataArray( _aic_aux, [product_families, sales_channels] )\n_bayes_ic = xr.DataArray( _bic_aux, [product_families, sales_channels] )\n_summaries = xr.DataArray( _smry_aux, [product_families, sales_channels] )\n\nresult = xr.Dataset( {'Regression': _regression, 'RSquared': _r_squared, 'AdjRSquared': _adjusted_r_squared, 'StdDevRegression': _std_dev_regression, 'LogLikelihood': _log_likelihood, 'AkaikeInformationCriteria': _akaike_ic, 'BayesInformationCriteria': _bayes_ic, 'Summary': _summaries})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_model_results", "moduleId": "ols_cubic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression Model Results", "units": null, "w": "184", "x": 46, "y": 56, "z": 1}, {"color": "#4CBCFF", "definition": "from statsmodels.regression.linear_model import OLS\nfrom statsmodels.tools.tools import add_constant\n\n_dependent_var = cdm_historical_sales\n\n_hist_independent_vars = cdm_hist_independent_variables.iloc[:,1:]\nfor _variable in _hist_independent_vars.columns:\n    _hist_independent_vars[_variable + '**2'] = _hist_independent_vars[_variable] ** 2\n_hist_independent_vars_w_constant = add_constant( _hist_independent_vars )\n\n_proj_independent_vars = cdm_proj_independent_variables.iloc[:,1:]\nfor _variable in _proj_independent_vars.columns:\n    _proj_independent_vars[_variable + '**2'] = _proj_independent_vars[_variable] ** 2\n_proj_independent_vars_w_constant = add_constant( _proj_independent_vars )\n\n_historic_time_length = len( historic_time.values )\n_hist_predicts_array = np.empty( (0,_historic_time_length) )\n_proj_length = len( projected_time.values )\n_product_families_length = len( product_families.values )\n_sales_channels_length = len( sales_channels.values )\n_predicts_array = np.empty( (0, _proj_length) )\n_r_squared = []\n_adj_r_squared = []\n_std_dev_reg = []\n_log_lh = []\n_aic = []\n_bic = []\n_smry = []\n\nfor product in range( len(product_families.values) ):\n    for channel in range( len(sales_channels.values) ):\n        _model = OLS( _dependent_var[product,channel], _hist_independent_vars_w_constant ).fit()\n        _hist_predict = _model.predict( _hist_independent_vars_w_constant )\n        _hist_predicts_array = np.append( _hist_predicts_array, [_hist_predict], axis = 0 )\n        _predict = _model.predict( _proj_independent_vars_w_constant )\n        _predicts_array = np.append( _predicts_array, [_predict], axis = 0 )\n        _r_squared.append( _model.rsquared )\n        _adj_r_squared.append( _model.rsquared_adj )\n        _std_dev_reg.append( np.sqrt( _model.scale ) )\n        _log_lh.append( _model.llf )\n        _aic.append( _model.aic )\n        _bic.append( _model.bic )\n        _smry.append( _model.summary() )\n\n_hist_predicts_array_aux = _hist_predicts_array.reshape(_product_families_length,_sales_channels_length,_historic_time_length)\n_predicts_array_aux = _predicts_array.reshape(_product_families_length,_sales_channels_length,_proj_length)\n_r_squared_aux = np.array(_r_squared).reshape(_product_families_length,_sales_channels_length)\n_adj_r_squared_aux = np.array(_adj_r_squared).reshape(_product_families_length,_sales_channels_length)\n_std_dev_reg_aux = np.array(_std_dev_reg).reshape(_product_families_length,_sales_channels_length)\n_log_lh_aux = np.array(_log_lh).reshape(_product_families_length,_sales_channels_length)\n_aic_aux = np.array(_aic).reshape(_product_families_length,_sales_channels_length)\n_bic_aux = np.array(_bic).reshape(_product_families_length,_sales_channels_length)\n_smry_aux = np.array(_smry).reshape(_product_families_length,_sales_channels_length)\n\n\n_hist_proj = xr.DataArray( _hist_predicts_array_aux, [product_families, sales_channels,historic_time] )\n_proj = create_dataarray( _predicts_array_aux, [product_families, sales_channels, projected_time] )\n_regression = change_index( _hist_proj, historic_time, historic_projected_time, defaultValue = 0. ) + change_index( _proj, projected_time, historic_projected_time, defaultValue = 0. )\n_r_squared = xr.DataArray( _r_squared_aux, [product_families, sales_channels] )\n_adjusted_r_squared = xr.DataArray( _adj_r_squared_aux, [product_families, sales_channels] )\n_std_dev_regression = xr.DataArray( _std_dev_reg_aux, [product_families, sales_channels] )\n_log_likelihood = xr.DataArray( _log_lh_aux, [product_families, sales_channels] )\n_akaike_ic = xr.DataArray( _aic_aux, [product_families, sales_channels] )\n_bayes_ic = xr.DataArray( _bic_aux, [product_families, sales_channels] )\n_summaries = xr.DataArray( _smry_aux, [product_families, sales_channels] )\n\nresult = xr.Dataset( {'Regression': _regression, 'RSquared': _r_squared, 'AdjRSquared': _adjusted_r_squared, 'StdDevRegression': _std_dev_regression, 'LogLikelihood': _log_likelihood, 'AkaikeInformationCriteria': _akaike_ic, 'BayesInformationCriteria': _bayes_ic, 'Summary': _summaries})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_model_results", "moduleId": "ols_quadratic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression Model Results", "units": null, "w": "184", "x": 37, "y": 58, "z": 1}, {"color": "#4CBCFF", "definition": "from statsmodels.regression.linear_model import OLS\nfrom statsmodels.tools.tools import add_constant\n\n_dependent_var = cdm_historical_sales\n_hist_independent_vars = cdm_hist_independent_variables.iloc[:,1:]\n_independent_vars_w_constant = add_constant( _hist_independent_vars )\n_proj_independent_vars = cdm_proj_independent_variables.iloc[:,1:]\n_proj_independent_vars_w_constant = add_constant( _proj_independent_vars )\n_historic_time_length = len( historic_time.values )\n_hist_predicts_array = np.empty( (0,_historic_time_length) )\n_proj_length = len( projected_time.values )\n_product_families_length = len( product_families.values )\n_sales_channels_length = len( sales_channels.values )\n_predicts_array = np.empty( (0, _proj_length) )\n_r_squared = []\n_adj_r_squared = []\n_std_dev_reg = []\n_log_lh = []\n_aic = []\n_bic = []\n_smry = []\n\nfor product in range( len(product_families.values) ):\n    for channel in range( len(sales_channels.values) ):\n        _model = OLS( _dependent_var[product,channel], _independent_vars_w_constant ).fit()\n        _hist_predict = _model.predict( _independent_vars_w_constant )\n        _hist_predicts_array = np.append( _hist_predicts_array, [_hist_predict], axis = 0 )\n        _predict = _model.predict( _proj_independent_vars_w_constant )\n        _predicts_array = np.append( _predicts_array, [_predict], axis = 0 )\n        _r_squared.append( _model.rsquared )\n        _adj_r_squared.append( _model.rsquared_adj )\n        _std_dev_reg.append( np.sqrt( _model.scale ) )\n        _log_lh.append( _model.llf )\n        _aic.append( _model.aic )\n        _bic.append( _model.bic )\n        _smry.append( _model.summary() )\n        \n_hist_predicts_array_aux = _hist_predicts_array.reshape(_product_families_length,_sales_channels_length,_historic_time_length)\n_predicts_array_aux = _predicts_array.reshape(_product_families_length,_sales_channels_length,_proj_length)\n_r_squared_aux = np.array(_r_squared).reshape(_product_families_length,_sales_channels_length)\n_adj_r_squared_aux = np.array(_adj_r_squared).reshape(_product_families_length,_sales_channels_length)\n_std_dev_reg_aux = np.array(_std_dev_reg).reshape(_product_families_length,_sales_channels_length)\n_log_lh_aux = np.array(_log_lh).reshape(_product_families_length,_sales_channels_length)\n_aic_aux = np.array(_aic).reshape(_product_families_length,_sales_channels_length)\n_bic_aux = np.array(_bic).reshape(_product_families_length,_sales_channels_length)\n_smry_aux = np.array(_smry).reshape(_product_families_length,_sales_channels_length)\n\n\n_hist_proj = xr.DataArray( _hist_predicts_array_aux, [product_families, sales_channels,historic_time] )\n_proj = create_dataarray( _predicts_array_aux, [product_families, sales_channels, projected_time] )\n_regression = change_index( _hist_proj, historic_time, historic_projected_time, defaultValue = 0. ) + change_index( _proj, projected_time, historic_projected_time, defaultValue = 0. )\n_r_squared = xr.DataArray( _r_squared_aux, [product_families, sales_channels] )\n_adjusted_r_squared = xr.DataArray( _adj_r_squared_aux, [product_families, sales_channels] )\n_std_dev_regression = xr.DataArray( _std_dev_reg_aux, [product_families, sales_channels] )\n_log_likelihood = xr.DataArray( _log_lh_aux, [product_families, sales_channels] )\n_akaike_ic = xr.DataArray( _aic_aux, [product_families, sales_channels] )\n_bayes_ic = xr.DataArray( _bic_aux, [product_families, sales_channels] )\n_summaries = xr.DataArray( _smry_aux, [product_families, sales_channels] )\n\nresult = xr.Dataset( {'Regression': _regression, 'RSquared': _r_squared, 'AdjRSquared': _adjusted_r_squared, 'StdDevRegression': _std_dev_regression, 'LogLikelihood': _log_likelihood, 'AkaikeInformationCriteria': _akaike_ic, 'BayesInformationCriteria': _bayes_ic, 'Summary': _summaries})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_model_results", "moduleId": "ols_linear_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Model Results", "units": null, "w": "184", "x": 46, "y": 58, "z": 1}, {"color": "#4CBCFF", "definition": "from statsmodels.tsa.arima_model import ARIMA\n\n_dependent_var = cdm_historical_sales\n\n_historic_time_length = len( historic_time.values )\n_hist_proj_time_length = len( historic_projected_time.values )\n_product_families_length = len( product_families.values )\n_sales_channels_length = len( sales_channels.values )\n_projection_array = np.empty( (0, _hist_proj_time_length) )\n_resid = []\n_resid_df = []\n_log_lh = []\n_aic = []\n_bic = []\n_smry = []\n\nfor product in range( len(product_families.values) ):\n    for channel in range( len(sales_channels.values) ):\n        try:\n            _model = ARIMA( _dependent_var[product, channel], (2,0,1) ).fit()\n            _predict = _model.predict( start = 0, end = _hist_proj_time_length - 1 )\n            if np.isnan( np.sum( _predict ) ) == True:\n                _model = ARIMA( _dependent_var[product, channel], (2,0,0) ).fit()\n                _predict = _model.predict( start = 0, end = _hist_proj_time_length - 1 )\n        except:\n            _model = ARIMA( _dependent_var[product, channel], (1,0,0) ).fit()\n            _predict = _model.predict( start = 0, end = _hist_proj_time_length - 1 )\n        _projection_array = np.append( _projection_array, [_predict], axis = 0 )\n        _resid.append( _model.resid )\n        _resid_df.append( _model.df_resid )\n        _log_lh.append( _model.llf )\n        _aic.append( _model.aic )\n        _bic.append( _model.bic )\n        _smry.append( _model.summary() )\n\n_projection_array_aux = _projection_array.reshape(_product_families_length,_sales_channels_length,_hist_proj_time_length)\n_resid_aux = np.array(_resid).reshape(_product_families_length,_sales_channels_length,_historic_time_length)\n_resid_df_aux = np.array(_resid_df).reshape(_product_families_length,_sales_channels_length)\n_log_lh_aux = np.array(_log_lh).reshape(_product_families_length,_sales_channels_length)\n_aic_aux = np.array(_aic).reshape(_product_families_length,_sales_channels_length)\n_bic_aux = np.array(_bic).reshape(_product_families_length,_sales_channels_length)\n_smry_aux = np.array(_smry).reshape(_product_families_length,_sales_channels_length)\n\n_regression = xr.DataArray( _projection_array_aux, [product_families, sales_channels, historic_projected_time] )\n_residual = xr.DataArray( _resid_aux, [product_families, sales_channels, historic_time] )\n_sqr_residual = ( _residual ** 2 ).sum(historic_time.name)\n_residual_deg_of_freedom =xr.DataArray( _resid_df_aux, [product_families, sales_channels] )\n_mean_sqr_residual = _sqr_residual / _residual_deg_of_freedom\n_log_likelihood = xr.DataArray( _log_lh_aux, [product_families, sales_channels] )\n_akaike_ic = xr.DataArray( _aic_aux, [product_families, sales_channels] )\n_bayes_ic = xr.DataArray( _bic_aux, [product_families, sales_channels] )\n_summary = xr.DataArray( _smry_aux, [product_families, sales_channels] )\n\nresult = xr.Dataset( {'Regression': _regression, 'MeanSqrResidual':_mean_sqr_residual, 'LogLikelihood': _log_likelihood, 'AkaikeInformationCriteria': _akaike_ic, 'BayesInformationCriteria': _bayes_ic, 'Summary': _summary} ) ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_model_results", "moduleId": "arima", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Model Results", "units": null, "w": "184", "x": 55, "y": 70, "z": 1}, {"color": "#4CBCFF", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = 0. )\n_observed_regression = xr.where( to_dataarray(historic_projected_time) < first_projected_month, _observed_data, cdm_ols_linear_reg_model_results.Regression)\n_icl = cdm_ols_linear_reg_model_results.Regression - cdm_t * cdm_ols_linear_reg_model_results.StdDevRegression\n_icl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _icl ) )\n_scl = cdm_ols_linear_reg_model_results.Regression + cdm_t * cdm_ols_linear_reg_model_results.StdDevRegression\n_scl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _scl ) )\n\nresult = xr.concat( [_observed_regression, _icl, _scl], dim = regression_and_confid_levels)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_model_confid_bands_an", "moduleId": "ols_linear_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Model Confidence Bands Analysis", "units": null, "w": "184", "x": 46, "y": 103, "z": 1}, {"color": "#4CBCFF", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = 0. )\n_observed_regression = xr.where( to_dataarray(historic_projected_time) < first_projected_month, _observed_data, cdm_ols_quad_reg_model_results.Regression)\n_icl = cdm_ols_quad_reg_model_results.Regression - cdm_t * cdm_ols_quad_reg_model_results.StdDevRegression\n_icl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _icl ) )\n_scl = cdm_ols_quad_reg_model_results.Regression + cdm_t * cdm_ols_quad_reg_model_results.StdDevRegression\n_scl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _scl ) )\n\nresult = xr.concat( [_observed_regression, _icl, _scl], dim = regression_and_confid_levels)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_model_confid_bands_an", "moduleId": "ols_quadratic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Reg Model Confidence Bands Analysis", "units": null, "w": "184", "x": 37, "y": 104, "z": 1}, {"color": "#4CBCFF", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = 0. )\n_observed_regression = xr.where( to_dataarray(historic_projected_time) < first_projected_month, _observed_data, cdm_ols_cubic_reg_model_results.Regression)\n_icl = cdm_ols_cubic_reg_model_results.Regression - cdm_t * cdm_ols_cubic_reg_model_results.StdDevRegression\n_icl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _icl ) )\n_scl = cdm_ols_cubic_reg_model_results.Regression + cdm_t * cdm_ols_cubic_reg_model_results.StdDevRegression\n_scl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _scl ) )\n\nresult = xr.concat( [_observed_regression, _icl, _scl], dim = regression_and_confid_levels)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_model_confid_bands_an", "moduleId": "ols_cubic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Reg Model Confidence Bands Analysis", "units": null, "w": "184", "x": 46, "y": 101, "z": 1}, {"color": "#4CBCFF", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = 0. )\n_observed_regression = xr.where( to_dataarray(historic_projected_time) < first_projected_month, _observed_data, cdm_arima_model_results.Regression)\n_icl = cdm_arima_model_results.Regression - cdm_t * xr.ufuncs.sqrt( cdm_arima_model_results.MeanSqrResidual )\n_icl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _icl ) )\n_scl = cdm_arima_model_results.Regression + cdm_t * xr.ufuncs.sqrt( cdm_arima_model_results.MeanSqrResidual )\n_scl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _scl ) )\n\nresult = xr.concat( [_observed_regression, _icl, _scl], dim = regression_and_confid_levels)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_model_confid_bands_an", "moduleId": "arima", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Model Confidence Bands Analysis", "units": null, "w": "184", "x": 55, "y": 116, "z": 1}, {"color": "#4CBCFF", "definition": "result = np.asscalar( subset( get_pos(projected_time) == 0 ).values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "first_projected_month", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "First Projected Month", "units": null, "w": "184", "x": "489", "y": "366", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"R-Squared\",\"Adjusted R-Squared\",\"Log-Likelihood\",\"Akaike's Inf Criteria\", \"Bayes's Inf Criteria\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_results", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression Results", "units": null, "w": "100", "x": "446", "y": "231", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.concat( [cdm_ols_linear_reg_model_results.RSquared, cdm_ols_linear_reg_model_results.AdjRSquared, cdm_ols_linear_reg_model_results.LogLikelihood, cdm_ols_linear_reg_model_results.AkaikeInformationCriteria, cdm_ols_linear_reg_model_results.BayesInformationCriteria], dim = regression_results )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_model_reg_res", "moduleId": "ols_linear_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Model Regression Results", "units": null, "w": "184", "x": 272, "y": 58, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.concat( [cdm_ols_quad_reg_model_results.RSquared, cdm_ols_quad_reg_model_results.AdjRSquared, cdm_ols_quad_reg_model_results.LogLikelihood, cdm_ols_quad_reg_model_results.AkaikeInformationCriteria, cdm_ols_quad_reg_model_results.BayesInformationCriteria], dim = regression_results )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_model_reg_res", "moduleId": "ols_quadratic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression Model Regression Results", "units": null, "w": "184", "x": 263, "y": 58, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.concat( [cdm_ols_cubic_reg_model_results.RSquared, cdm_ols_cubic_reg_model_results.AdjRSquared, cdm_ols_cubic_reg_model_results.LogLikelihood, cdm_ols_cubic_reg_model_results.AkaikeInformationCriteria, cdm_ols_cubic_reg_model_results.BayesInformationCriteria], dim = regression_results )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_model_reg_res", "moduleId": "ols_cubic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression Model Regression Results", "units": null, "w": "184", "x": 272, "y": 56, "z": 1}, {"color": "#4CBCFF", "definition": "_historical_data = cdm_hist_sales_sales_chn_prod_family\n_historical_data_avg = xr.where( get_pos(historic_time) >= 0, _historical_data.mean(historic_time.name), 0 )\n_historical_estimation = change_index( cdm_arima_model_results.Regression, historic_projected_time, historic_time )\n_r_squared = ( ( _historical_estimation - _historical_data_avg ) ** 2 ).sum(historic_time.name) / ( ( _historical_data - _historical_data_avg ) ** 2 ).sum(historic_time.name)\n\n_historic_time_length = len( historic_time.values )\n_independent_vars_length = len( independent_variables_chosen.values )\n\n_adj_r_squared = 1 - ( ( ( 1 - _r_squared ) * ( _historic_time_length - 1 ) ) / ( _historic_time_length - _independent_vars_length - 1 ) )\n\nresult = xr.concat( [_r_squared, _adj_r_squared, cdm_arima_model_results.LogLikelihood, cdm_arima_model_results.AkaikeInformationCriteria, cdm_arima_model_results.BayesInformationCriteria], dim = regression_results )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_model_reg_res", "moduleId": "arima", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Model Regression Results", "units": null, "w": "184", "x": 281, "y": 70, "z": 1}, {"color": "#CCCCCC", "definition": "result = xr.concat( [cdm_ols_linear_reg_model_reg_res, cdm_ols_quad_reg_model_reg_res, cdm_ols_cubic_reg_model_reg_res, cdm_arima_model_reg_res], dim = regression_models )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_reg_results_comp", "moduleId": "models_comparison", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Regression Results Comparison", "units": null, "w": "184", "x": 272, "y": 50, "z": 1}, {"color": null, "definition": "result = concat_index( 'Observed Data', regression_models )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_models_observed_data", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression Models + Observed Data", "units": null, "w": "100", "x": "244", "y": "123", "z": 1}, {"color": "#4CBCFF", "definition": "_results_for_r_sqr = xr.where( (cdm_models_reg_results_comp < 0) | (cdm_models_reg_results_comp > 1), 0, cdm_models_reg_results_comp )\n\nresult = xr.where( ( to_dataarray(regression_results) == 'R-Squared' ) | ( to_dataarray(regression_results) == 'Adjusted R-Squared' ), _results_for_r_sqr.max(regression_models.name), cdm_models_reg_results_comp.min(regression_models.name) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_reg_results_max_min", "moduleId": "models_comparison", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Regression Results Max (Min)", "units": null, "w": "184", "x": 272, "y": 98, "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Models Comparison", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "174", "identifier": "node131", "moduleId": "models_comparison", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "706", "x": 23, "y": 15, "z": -1}, {"color": "#9999ff", "definition": "result = subset( to_dataarray(independent_variables) != 'Population' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "gdp_and_temperature", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GDP and Temperature", "units": null, "w": "100", "x": "345", "y": "123", "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index( subscript( cdm_hist_proj_independent_variables, independent_variables, 'Population' ), historic_projected_totaltime, historic_time )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_population", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Population", "units": null, "w": "184", "x": "58", "y": "581", "z": 1}, {"color": "#4CBCFF", "definition": "result = result = change_index( change_index( cdm_hist_proj_independent_variables, independent_variables, gdp_and_temperature ), historic_projected_totaltime, historic_time )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_gdp_temperature", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GDP and Temperature", "units": null, "w": "184", "x": "58", "y": "629", "z": 1}, {"color": "#4CBCFF", "definition": "result = cdm_ols_linear_reg_model_results.AdjRSquared", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_model_adj_rsqr", "moduleId": "ols_linear_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Model Adjusted R-Squared", "units": null, "w": "184", "x": 272, "y": 103, "z": 1}, {"color": "#4CBCFF", "definition": "result = cdm_ols_quad_reg_model_results.AdjRSquared", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_model_adj_rsqr", "moduleId": "ols_quadratic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression Model Adjusted R-Squared", "units": null, "w": "184", "x": 263, "y": 104, "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( cdm_arima_model_reg_res, regression_results, 'Adjusted R-Squared' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_model_adj_rsqr", "moduleId": "arima", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Model Adjusted R-Squared", "units": null, "w": "184", "x": 281, "y": 116, "z": 1}, {"color": "#4CBCFF", "definition": "result = cdm_ols_cubic_reg_model_results.AdjRSquared", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_model_adj_rsqr", "moduleId": "ols_cubic_regression", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression Model Adjusted R-Squared", "units": null, "w": "184", "x": 272, "y": 101, "z": 1}, {"color": "#4CFFA6", "definition": "result = cdm_choice_sales_channel", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a4a166db2bbbd4520b8fab9a5f6b4f036_copy", "moduleId": "inputs", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "cdm_choice_sales_channel", "picture": null, "title": "Sales Channel", "units": null, "w": "224", "x": "62", "y": "533", "z": 1}, {"color": "#4cffa6", "definition": "result = choice( sales_channels,1, False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_choice_sales_channel", "moduleId": "inputs", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Channel", "units": null, "w": "140", "x": "89", "y": "533", "z": "-2"}, {"color": "#CCCCCC", "definition": "_reg_values = cdm_models_reg_results_max_min.round(2).astype(str)\n\nresult = xr.concat( [_reg_values, cdm_models_reg_results_best_fit_model], dim = regression_comparison_concepts )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_reg_results_best_fit_value", "moduleId": "models_comparison", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Regression Results - Best Fit Value", "units": null, "w": "184", "x": 512, "y": 146, "z": 1}, {"color": "#4CBCFF", "definition": "_max_min_comparison = cdm_models_reg_results_max_min == cdm_models_reg_results_comp\n_cumulated = _max_min_comparison.cumsum( regression_models.name )\n_cumulated = xr.where( _max_min_comparison == True, _cumulated, 0 )\n_models_cube = to_dataarray( regression_models )\n\nresult = ( ( _cumulated == 1 ) * _models_cube ).sum(regression_models.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_reg_results_best_fit_model", "moduleId": "models_comparison", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Regression Results - Best Fit Model", "units": null, "w": "184", "x": 272, "y": 146, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Best Fit Value\",\"Best Fit Model\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_comparison_concepts", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression Comparison Concepts", "units": null, "w": "100", "x": "545", "y": "231", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_reg_indexes_mod", "moduleId": "ex_regressions", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regressions Indexes", "units": null, "w": "184", "x": 55, "y": 370, "z": 1}, {"color": "#CCCCCC", "definition": "_vars = change_index( cdm_hist_proj_independent_variables, historic_projected_totaltime, historic_time )\n_min = _vars.min( historic_time.name )\n_max = _vars.max( historic_time.name )\n\nresult = xr.where( get_pos(historic_time) == 0, 0, xr.where( ( _max - _min ) == 0, 0.5, ( _vars - _min ) / ( _max - _min ) ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_normalized_independent_vars", "moduleId": "inputs", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normalized Independent Variables", "units": null, "w": "184", "x": "289", "y": "581", "z": 1}, {"color": "#4CBCFF", "definition": "if pmk_per_capita_cons_method == 'Input':\n    if selected_scenario != 'All':\n        result = create_dataarray( 0., [time] )\n    else:\n        result = create_dataarray( 0., [time, scenarios] )\nelif selected_scenario != 'All':\n    result = create_dataarray( 0., [time, iterations] )\nelse:\n    result = create_dataarray( 0., [time, iterations, scenarios] )\n\n# Hago esto para evitar problemas con dynamic.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "empty_cube_time_scenarios_iterations", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Empty Cube with Time, Scenarios and Iterations", "units": null, "w": "184", "x": "489", "y": "460", "z": 1}, {"color": "#4CBCFF", "definition": "result = max(historic_time.values)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "last_historical_month", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Last Historical Month", "units": null, "w": "184", "x": "489", "y": "413", "z": 1}, {"color": "#4CBCFF", "definition": "_array_time = to_dataarray(time)\n\nresult = apply_fn( _array_time, lambda x: x[:4] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_to_years", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time to Years", "units": null, "w": "184", "x": "60", "y": "321", "z": 1}, {"color": "#4CBCFF", "definition": "result = time_to_years.astype(int)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_to_years_numeric", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time to Years (numeric)", "units": null, "w": "184", "x": "60", "y": "366", "z": 1}, {"color": "#4CFFA6", "definition": "result = initial_modeling_year", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa8205d25ce7846beb10efc91e9c90820_copy", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "initial_modeling_year", "picture": null, "title": "Initial Modeling Year", "units": null, "w": "340", "x": "299", "y": "82", "z": "2"}, {"color": "#4CFFA6", "definition": "result = time_horizon", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a7e2b2014c9794fd382d35e31142f17bc_copy", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "time_horizon", "picture": null, "title": "Time Horizon", "units": null, "w": "340", "x": "299", "y": "112", "z": "2"}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_time_rel_indexes_variables_mod", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time Related Indexes and Variables", "units": null, "w": "184", "x": "41", "y": "344", "z": 1}, {"color": null, "definition": "result = concat_index( historic_time, totaltime )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "historic_projected_totaltime", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historic & Projected Totaltime", "units": null, "w": "100", "x": "54", "y": "243", "z": 1}, {"color": "#eeeeee", "definition": null, "description": "Regressions Example", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "368", "identifier": "a428b51d3292a4c079237b3db2b519a7d", "moduleId": "ex_regressions", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "999", "x": 28, "y": 47, "z": "-3"}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "inputs", "moduleId": "ex_regressions", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Inputs", "units": null, "w": "186", "x": 74, "y": 229, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "ols_linear_regression", "moduleId": "ex_regressions", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression", "units": null, "w": "186", "x": 525, "y": 262, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "ols_quadratic_regression", "moduleId": "ex_regressions", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression", "units": null, "w": "186", "x": 525, "y": 199, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "ols_cubic_regression", "moduleId": "ex_regressions", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression", "units": null, "w": "186", "x": 299, "y": 257, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "arima", "moduleId": "ex_regressions", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Arima", "units": null, "w": "186", "x": 299, "y": 194, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "models_comparison", "moduleId": "ex_regressions", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Comparison", "units": null, "w": "186", "x": 778, "y": 229, "z": 1}, {"color": "#9fc5e8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 50, "identifier": "pyplan_library", "moduleId": "ex_regressions", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pyplan library", "units": null, "w": 100, "x": 50, "y": 500, "z": 1}, {"color": "#9fc5e8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 61, "identifier": "pyplan_xarray_extensions", "moduleId": "pyplan_library", "nodeClass": "module", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pyplan XArray Extensions", "units": null, "w": 116, "x": 100, "y": 100, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(pypi_name,import_name=None):\n    \"\"\" Install library from pypi or .libs dir\n    pypi_name : Library name in pypi\n    import_name: library name for use in import\n    \"\"\"\n    import importlib\n    import os\n    \n    def _exists_module(import_name):\n        try:\n            importlib.import_module(import_name)\n            return True\n        except ImportError:\n            return False\n\n    if import_name is None:\n        import_name = pypi_name\n        \n    if not _exists_module(import_name):\n        #check in lib folder\n        #install lib\n        os.system(f\"pip install {pypi_name}\")\n        \n        importlib.invalidate_caches()\n        \n        if not _exists_module(import_name):\n            raise ValueError(f\"Can't install the module '{import_name}'\")\n    return True\n    \n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "install_library", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Install Library", "units": null, "w": 179, "x": 306, "y": 497, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataArray,domainDic, defaultValue=None):\n    _da = dataArray\n    for key in domainDic:\n        _da = _da.reindex({key:domainDic[key].values})\n        _da = _da.rename({key:domainDic[key].name})\n    if not defaultValue is None:\n        _da = _da.fillna(defaultValue)\n    return _da\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "set_domain", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Set domain", "units": null, "w": 179, "x": 107, "y": 90, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(values,name=\"Report\", report_index=None):\n    _titles = [str(xx.name) for xx in values]\n    _index = None\n    if report_index is None:\n        _index = pd.Index( _titles, name=name)\n    else:\n        _index = report_index\n    \n    return xr.concat(values,_index)\n\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "build_report", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Build Report", "units": null, "w": 179, "x": 107, "y": 127, "z": 1}, {"color": null, "definition": "def _fn(filepath, useOpenpyxl=False, dataOnly=True, readOnly=True ):\r\n    \"\"\" Create excel object from filepath.\r\n    filepath: path to excel file\r\n    useOpenpyxl: True for use custom \r\n    dataOnly: True for view only the values, not formula\r\n    readOnly: True for read only, False for write options\r\n    Ex.\r\n            excel_connection(\"\\path\\to\\the\\excelfile.xlsx\")\r\n    \"\"\"\r\n    import os\r\n    \r\n\r\n    if self.model.isLinux():\r\n        filepath = filepath.replace(\"\\\\\",\"/\")        \r\n\r\n    fullFilename=filepath\r\n    \r\n    if not os.path.isfile(fullFilename):\r\n        fullFilename = self.node.model.getNode(\"current_path\").result + filepath     \r\n        \r\n\r\n    if os.path.isfile(fullFilename):\r\n        if useOpenpyxl:\r\n            from openpyxl import load_workbook\r\n            return load_workbook(fullFilename, data_only=dataOnly, read_only=readOnly)\r\n        else:\r\n            return filepath\r\n    else:\r\n        raise ValueError(\"File not found\") \r\n        \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "excel_connection", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Excel connection", "units": null, "w": 179, "x": 306, "y": 90, "z": 1}, {"color": null, "definition": "def _fn(value,coords,dtype=None):\n    _data = np.full( tuple([(len(x)) for x in coords]),value, dtype=dtype )\n    return xr.DataArray( _data, coords )\n\nresult = _fn\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "create_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Create dataArray", "units": null, "w": 179, "x": 107, "y": 164, "z": 1}, {"color": null, "definition": "def _fn(excel,sheetName=None,namedRange=None,cellRange=None, indexes=None, driver=\"Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ=%s;READONLY=TRUE\"):\r\n    \"\"\" return a pandas dataframe from excel.\r\n    excel: path to excel file or cp.excel object\r\n    sheetName: sheet name to be read\r\n    namedRange: name of the range to be read\r\n    cellRange: used with sheetname, for read from a simple range\r\n    indexes: Listo of columns names for convert to index of dataframe\r\n        Ex.\r\n            pandas_from_excel(excelNode,\"Sheet 1\")\r\n            pandas_from_excel(excelNode,namedRange=\"name_range\")\r\n            pandas_from_excel(excelNode,\"Sheet 1\",cellRange=\"A1:H10\")\r\n\r\n    \"\"\"\r\n\r\n    if isinstance(excel,str):\r\n        import os\r\n        \r\n        \r\n        if not os.path.isfile(excel):\r\n            excel = os.path.join(self.model.getNode(\"current_path\").result,excel)\r\n            \r\n            \r\n        if self.model.isLinux():\r\n            filename=excel\r\n            target_dir, single_filename = os.path.split(filename)\r\n            file_name, file_extension = os.path.splitext(single_filename)\r\n            target_dir = os.path.join(target_dir, file_name)\r\n            \r\n            file_to_read_legacy = os.path.join(target_dir, (f\"{namedRange if namedRange else ''}.pkl\"))\r\n            target_dir = f\"{target_dir[:target_dir.rfind('/')+1]}.{target_dir[target_dir.rfind('/')+1:]}\"\r\n\r\n            file_to_read = os.path.join(target_dir, f\"{namedRange if namedRange else ''}.pkl\") if os.path.isfile(os.path.join(target_dir, f\"{namedRange if namedRange else ''}.pkl\")) else file_to_read_legacy\r\n            \r\n            if os.path.isfile(file_to_read):\r\n                df = pd.read_pickle(file_to_read,compression='gzip')\r\n                if not indexes is None:\r\n                    df.set_index(indexes,inplace=True)\r\n                return df\r\n            else:\r\n                from openpyxl import load_workbook\r\n                _wb = load_workbook(filename, data_only=True, read_only=True)\r\n                return _fn(_wb,sheetName,namedRange,cellRange,indexes)\r\n        else:\r\n            \r\n\r\n            import pyodbc\r\n    \r\n            cnxn = pyodbc.connect(driver % excel, autocommit=True)\r\n            cursor = cnxn.cursor()\r\n            table = \"\"\r\n            if not sheetName is None: \r\n                table = \"[\"+sheetName+\"$]\"\r\n            if not namedRange is None:\r\n                table = \"[\"+namedRange+\"]\"\r\n            if not cellRange is None:\r\n                table = \"[\"+sheetName+\"$\"+cellRange+\"]\"\r\n    \r\n            cursor.execute(\"SELECT * FROM \" + table)\r\n            rows = cursor.fetchall()\r\n            columnNames = [str(x[0]) for x in cursor.description]\r\n            cnxn.close()\r\n    \r\n            _df = pd.DataFrame.from_records(rows,None,None,columnNames)\r\n            _df = _df.dropna(how =\"all\")\r\n            if not indexes is None:\r\n                _df.set_index(indexes,inplace=True)\r\n            return _df\r\n    else:\r\n        \r\n        if \"openpyxl.workbook\" in str(type(excel)):\r\n            rangeToRead = None\r\n            if not namedRange is None:\r\n                the_range = excel.defined_names[namedRange]\r\n                dests = the_range.destinations\r\n                for title, coord in dests:\r\n                    ws = excel[title]\r\n                    rangeToRead=ws[coord]\r\n            elif not cellRange is None:\r\n                ws = excel[sheetName]\r\n                rangeToRead = ws[cellRange]\r\n            else: \r\n                rangeToRead = excel[sheetName]\r\n\r\n            nn=0\r\n            cols=[]\r\n            values = []\r\n            for row in rangeToRead:\r\n                if nn==0:\r\n                    cols = [str(c.value) for c in row]\r\n                else:\r\n                    values.append([c.value for c in row]) \r\n                nn+=1\r\n            df = pd.DataFrame(values,None,cols)\r\n            if not indexes is None:\r\n                if isinstance(indexes,str):\r\n                    indexes=[indexes]\r\n                toIndex = []\r\n                for indexColumn in indexes:\r\n                    if indexColumn in df.columns.values:\r\n                        toIndex.append(indexColumn)\r\n                if len(toIndex)>0:\r\n                    df.set_index(toIndex, inplace=True)\r\n\r\n            return df.dropna(how =\"all\")\r\n        else:\r\n            raise ValueError(\"excel can be cp.excel object\") \r\n            \r\n            \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "pandas_from_excel", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pandas from excel", "units": null, "w": 179, "x": 304, "y": 238, "z": 1}, {"color": null, "definition": "def _fn(dataframe, columnName=None, removeEmpty=True):\r\n    \"\"\" Return a pd.Index from an column of a pandas dataframe.\r\n    dataframe: pandas dataframe\r\n    columnName: dataframe column name used for create cp.index. By default is created using the first column\r\n    removeEmpty: True for remove empty rows\r\n        Ex.\r\n            index_from_pandas(df)\r\n            index_from_pandas(df,\"column10\")\r\n    \"\"\"                \r\n    \r\n    _serie= None\r\n    if columnName is None:\r\n        _serie=dataframe[dataframe.columns[0]]\r\n    else:\r\n        _serie=dataframe[columnName]\r\n\r\n    if removeEmpty:\r\n        _serie.dropna(inplace=True)\r\n        if kind_to_string( _serie.dtype.kind )==\"string\" or kind_to_string(_serie.dtype.kind )==\"object\":\r\n            _serie = _serie[_serie!=\"\"]\r\n\r\n    return pd.Index(_serie.unique())\r\n\r\n            \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "index_from_pandas", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Index from Pandas", "units": null, "w": 179, "x": 304, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(kind):\n    \"\"\"Returns the data type on human-readable string\n    \"\"\"\n    if kind in {'U', 'S'}:\n        return \"string\"\n    elif kind in {'b'}:\n        return \"boolean\"\n    elif kind in {'i','u','f','c'}:\n        return \"numeric\"\n    elif kind in {'m','M'}:\n        return \"date\"\n    elif kind in {'O'}:\n        return \"object\"\n    elif kind in {'V'}:\n        return \"void\"\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "kind_to_string", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Kind to String", "units": null, "w": 179, "x": 304, "y": 201, "z": 1}, {"color": null, "definition": "def _fn(excel, sheetName=None,namedRange=None,cellRange=None, columnName=None, removeEmpty=True):\r\n    \"\"\" Return a pd.Index from an excel file.\r\n    excel: pp.excel object\r\n    sheetName: sheet name to be read\r\n    namedRange: name of the range to be read\r\n    cellRange: used with sheetname, for read from a simple range\r\n    columnName: dataframe column name used for create pp.index. By default is created using the first column\r\n    removeEmpty: True for remove empty rows\r\n        Ex.\r\n            index_from_excel(excelNode,\"Sheet 1\")\r\n            index_from_excel(excelNode,namedRange=\"name_range\")\r\n            index_from_excel(excelNode,namedRange=\"name_range\", columnName=\"indicadores\")\r\n    \"\"\"                \r\n    if isinstance(excel,str) or \"openpyxl.workbook\" in str(type(excel)):\r\n        _df = pandas_from_excel(excel,sheetName,namedRange,cellRange)\r\n        return index_from_pandas(_df,columnName,removeEmpty)\r\n    else:\r\n        raise ValueError(\"excel can be excel_connection object or a str path to the filename\")\r\n\r\n            \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "index_from_excel", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Index from Excel", "units": null, "w": 179, "x": 304, "y": 312, "z": 1}, {"color": null, "definition": "def _fn(excel, sheetName=None,namedRange=None,cellRange=None, indexes=None, valueColumns=None, indexColumnHeaders=None, replaceByIndex=None, defaultValue=0):\r\n    \"\"\" Return a xr.DataArray from excel file.\r\n    excel: excel_connection object.\r\n    sheetName: sheet name to be read\r\n    namedRange: name of the range to be read.\r\n    cellRange: used with sheetName to read from a simple range.\r\n    indexes: pd.Index objects to perform a change_index operation.\r\n    valueColumns: string with the column name of the dataframe that contains the values.\r\n                pd.Index with column names to convert columns to index.\r\n    indexColumnHeaders: (optional) column names in pandas to parse with indexes. Used if header on dataframe is not equal to index identifiers.\r\n    replaceByIndex: (optional) replace index used in valueColumns by this index (using change_index).\r\n\r\n        Ex.\r\n            dataarray_from_excel(excelNode,\"Sheet 1\",indexes=[indicadores],valueColumns=\"descuentos\")\r\n            pp.dataarray_from_excel(excelNode,namedRange=\"nombre_rango\",indexes=[indicadores],valueColumns=time)\r\n    \"\"\"\r\n\r\n    dataframe = pandas_from_excel(excel,sheetName,namedRange,cellRange)\r\n    # Check size of dataframe. If it is empty, create empty dataArray. Else, proceed\r\n    if len(dataframe) == 0:\r\n        if not isinstance(indexes, list):\r\n            indexes = [indexes]\r\n        if isinstance(valueColumns, pd.Index):\r\n            indexes.append(valueColumns)\r\n        \r\n        _data = np.full(tuple([(len(x)) for x in indexes]), defaultValue)\r\n        return xr.DataArray(_data, indexes)\r\n    else:\r\n        valueIndex=None\r\n        if isinstance(valueColumns,pd.Index):\r\n            valueIndex = valueColumns\r\n            valueColumns = valueIndex.values\r\n        elif isinstance(valueColumns,str):\r\n            valueColumns = [valueColumns]\r\n    \r\n        if indexColumnHeaders is None:\r\n            indexColumnHeaders = [index.name for index in indexes]\r\n            \r\n        # Create total index and index names\r\n        _allindexes = indexes\r\n        _allIndexNames = indexColumnHeaders[:]\r\n        if not valueIndex is None:\r\n            _allindexes.append(valueIndex)\r\n            _allIndexNames.append(\"data_index\")    \r\n            \r\n        #fill other columns for prevent melt error\r\n        cols_not_in_df = [col for col in valueColumns if col not in dataframe.columns]\r\n        for col in cols_not_in_df:\r\n            dataframe[col] = np.nan\r\n    \r\n        _full = dataframe.reset_index().melt(id_vars=indexColumnHeaders,value_vars=valueColumns, var_name=\"data_index\", value_name=\"data_value\")\r\n        \r\n        # sum for acum over duplicate records\r\n        _full = _full.groupby(_allIndexNames, as_index=False).sum()\r\n        _dtype = _full[\"data_value\"].dtype\r\n        \r\n        _dataType = kind_to_string(_dtype.kind )\r\n        if _dataType==\"string\":\r\n            _full = _full[ (_full[\"data_value\"]!=\"\") & (_full['data_value'].notna()) ]\r\n        else:\r\n            _full = _full[ (_full[\"data_value\"]!=0) & (_full['data_value'].notna()) ]\r\n    \r\n        _full.set_index(_allIndexNames, inplace=True)\r\n        _da = _full[\"data_value\"].to_xarray()  \r\n    \r\n        # If indexed, rename index\r\n        if not indexes is None and not indexColumnHeaders is None:\r\n            if not isinstance(indexes,list):\r\n                indexes = [indexes]\r\n            idxPos=0\r\n            for cubeIndex in indexes:\r\n                newIndexName=cubeIndex.name\r\n                if idxPos<= len(indexColumnHeaders)-1:\r\n                    oldIndexName=indexColumnHeaders[idxPos]\r\n                    if not newIndexName in _da.coords:\r\n                        _da.coords[newIndexName] = _da.coords[oldIndexName]\r\n                        _da = _da.swap_dims({oldIndexName:newIndexName}).drop(oldIndexName)\r\n                    idxPos+=1\r\n                    # Reindex to complete combinations\r\n                    _da = _da.reindex({newIndexName:cubeIndex.values})\r\n    \r\n        if not valueIndex is None:\r\n            newIndexName=valueIndex.name\r\n            oldIndexName=\"data_index\"\r\n            if not newIndexName in _da.coords:\r\n                _da.coords[newIndexName] = _da.coords[oldIndexName]\r\n                _da = _da.swap_dims({oldIndexName:newIndexName}).drop(oldIndexName)\r\n            # Reindex to complete combinations\r\n            _da = _da.reindex({newIndexName:valueIndex.values})\r\n    \r\n            if not replaceByIndex is None:\r\n                _da = change_index(_da,valueIndex,replaceByIndex, 2 )    \r\n                \r\n        return _da.fillna(defaultValue)\r\n\r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "dataarray_from_excel", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "DataArray from Excel", "units": null, "w": 179, "x": 306, "y": 386, "z": 1}, {"color": null, "definition": "def _fn(dataArray, indexes, values):\r\n    \"\"\"\r\n    Filter dataArray using the filterList filters. \r\n\r\n    dataArray: dataArray to be filtered\r\n    indexes: the index to filter \r\n    values: the value to filter \r\n        Ex.\r\n            subscript(dataArray, index, value)\r\n    \"\"\"\r\n    if not isinstance(dataArray,xr.DataArray):\r\n        raise ValueError(\"the 'dataArray' parameter must be of the type xr.DataArray\")\r\n\r\n    if not isinstance(indexes,list):\r\n        indexes = [indexes]\r\n    if not isinstance(values,list):\r\n        values = [values]\r\n        \r\n    res = dataArray\r\n    filterDic = {}\r\n    for _pos, indexItem in enumerate(indexes):\r\n        filterDic[indexItem.name] = values[_pos]\r\n\r\n    if len(filterDic)>0:\r\n        res = res.sel(filterDic, drop=True)\r\n\r\n    return res\r\n        \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "subscript", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Subscript", "units": null, "w": 179, "x": 306, "y": 127, "z": 1}, {"color": null, "definition": "def _fn(dataArray,oldIndex,newIndex,compareMode=1,defaultValue=None):\r\n    \"\"\" Change index of a dataArray object.\r\n    \"\"\"\r\n    _da = dataArray\r\n\r\n\r\n    if compareMode==1:\r\n        _temp = _da.reindex({oldIndex.name:newIndex.values})\r\n        _temp[newIndex.name] = _temp[oldIndex.name]\r\n        _temp = _temp.swap_dims({oldIndex.name:newIndex.name}).drop(oldIndex.name)\r\n        if not defaultValue is None:\r\n            _temp = _temp.fillna(defaultValue)\r\n        return _temp\r\n    else:\r\n\r\n        if len(oldIndex.values) == len(newIndex.values):\r\n            _tmp = _da.copy()\r\n            _tmp.coords[newIndex.name] = _tmp.coords[oldIndex.name]\r\n            _tmp.coords[newIndex.name].data = newIndex.values\r\n            _tmp = _tmp.swap_dims({oldIndex.name : newIndex.name}).drop(oldIndex.name)\r\n            return _tmp\r\n        elif len(oldIndex.values) > len(newIndex.values):\r\n            raise ValueError(\"Changeindex by pos for indices of different size is not implemented\")\r\n        else:\r\n            raise ValueError(\"Changeindex by pos for indices of different size is not implemented\")\r\n    \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "change_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Change index", "units": null, "w": 179, "x": 306, "y": 164, "z": 1}, {"color": null, "definition": "def _fn(date_start,date_end,freq='M',format='%Y.%m'):\r\n    \"\"\"Create time index usign start and end dates and freq. The result is formated to format parameter\r\n        Ex.\r\n            create_time('2016.01','2018.12')\r\n            create_time('2016.01.01','2016.12.31',freq='D',format='%d/%m/%Y')\r\n    \"\"\"\r\n    if \".\" in date_start:\r\n        date_start = date_start.replace('.', '-')\r\n    if \".\" in date_end:\r\n        date_end = date_end.replace('.', '-')\r\n    return pd.Index(pd.period_range(start=date_start, end=date_end, freq=freq).strftime(format))\r\n        \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "create_time", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CreateTime", "units": null, "w": 179, "x": 505, "y": 90, "z": 1}, {"color": null, "definition": "def _fn(param1, param2, compareType=1, caseSensitive = True):\r\n    \"\"\"\r\n    param1: value or indexarray for compare\r\n    param2: index compare to\r\n    compareType: exact=1, start_with=2, end_with=3, contain=4  \r\n    caseSensitive: able to differentiate between uppercase and lowercase (by default True)\r\n\r\n    If param1 is a scalar (numeric or str) and param2 is an index:  return a dataArray indexed by param2 with True on ocurrences of param2\r\n        Ex. result = find(\"te\", region, cp.end_with)\r\n    If param1 is an index and param2 is an index too:  return a dataArray indexed by param1 and param2 with True on ocurrences of param1 on param2\r\n        Ex. result = find(subregion, region, cp.contain)\r\n\r\n    \"\"\"\r\n    def _internalFn(item,value):\r\n        if not isinstance(item,str):\r\n            item = str(item)\r\n        if not isinstance(value,str):\r\n            value = str(value)\r\n            \r\n        if compareType==1:\r\n            if caseSensitive:\r\n                return item == value\r\n            else:\r\n                return item.lower() == value.lower()\r\n        elif compareType==2:\r\n            if caseSensitive:\r\n                return item[:len(value)] == value\r\n            else:\r\n                return item[:len(value)].lower() == value.lower()                                    \r\n        elif compareType==3:\r\n            if caseSensitive:\r\n                return item[-len(value):] == value\r\n            else:\r\n                return item[-len(value):].lower() == value.lower()                    \r\n        elif compareType==4:\r\n            if caseSensitive:\r\n                return value in item\r\n            else:\r\n                return value.lower() in item.lower()\r\n\r\n    if (isinstance(param1,str) or str(param1).isnumeric()) and isinstance(param2,pd.Index):\r\n        vfn = np.vectorize(_internalFn)\r\n        return xr.DataArray(vfn(param2.values,param1),[param2])\r\n\r\n    if isinstance(param1,pd.Index) and isinstance(param2,pd.Index):\r\n        _res = create_dataarray(False, [param1,param2], dtype=bool)\r\n        for row in param1.values:\r\n            for col in param2.values:\r\n                _res.loc[ {param1.name:slice(row,row), param2.name:slice(col,col) }] = _internalFn(col,row)\r\n        return _res \r\n            \r\nresult = _fn\r\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "find", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Find", "units": null, "w": 179, "x": 107, "y": 201, "z": 1}, {"color": null, "definition": "def _fn(dataArray, dataMap, sharedIndex, defaultValue=0): \n    \"\"\"\n    Returns the value of dataArray indexed by the index of dataMap.\n    dataArray must be indexed by sharedIndex and dataArray values must correspond to elements of sharedIndex.\n    For example: Let's say you have a cube with an estimated inflation rate by Country (\"inflation_rate\" is the name of the cube; \"country\" is the name of the index) and you want to assign it to the corresponding Company depending on its location. On the other hand, there's a many-to-one map where each Company is allocated to a single Country (\"country_to_company_allocation\"). The sharedIndex, in this case, is Country (\"country\").\n    As a result, \n        lookup( inflation_rate , country_to_company_allocation , country )\n    will return the estimated inflation rate by Company.\n    \"\"\"\n\n    try:\n        return dataArray.sel({sharedIndex.name: dataMap }, drop=True) \n    except Exception as ex:\n        filtro =  dataMap.isin(sharedIndex.values)\n        valuesOk =  dataMap[dataMap.isin(sharedIndex.values)]\n        lookOk =  dataArray.sel({sharedIndex.name: valuesOk }, drop=True) \n        final = lookOk.reindex({dataMap.dims[0]:dataMap.coords[dataMap.dims[0]].values})\n        return final.fillna(defaultValue)\n    \nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "lookup", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Lookup", "units": null, "w": 179, "x": 505, "y": 127, "z": 1}, {"color": null, "definition": "def _fn(dataArray, mapInfo, sourceIndex, targetIndex, aggregationFunction='sum'):\n    \"\"\" Aggregates the values in DataArray to generate the result indexed by  targetIndex.\n        mapInfo gives the value of targetIndex for each element of sourceIndex (If the map does not match then the element will not be set into target index and information will be lost)\n        aggregationFuction (optional) especifies the function to be used when grouping data (sum, mean, min, max, median)\n\n        Example for aggregating time information into annual index the syntax is:\n            aggregate(dataArray, map, time, years)\n    \"\"\"\n    _map = pd.DataFrame({targetIndex.name:mapInfo.to_series()})\n    _serie = dataArray.to_series()\n    _df = pd.DataFrame({\"value\":_serie})\n    _empty_filter = _df[\"value\"]!=0\n    # Drop rows with 0 if dataframe is not empty (to avoid error)\n    if len(_df[_empty_filter]) != 0:\n        _df = _df[_empty_filter]\n    _df = _df.join(_map).reset_index()\n    _df.drop(columns=[sourceIndex.name],inplace=True)\n    _newDimList = [xx for xx in dataArray.dims if xx not in [sourceIndex.name]]\n    _newDimList.append(targetIndex.name)\n    _df = _df.groupby(_newDimList).agg(aggregationFunction)\n    _da = _df[\"value\"].to_xarray()\n\n    #reindex\n    _reindexDic={targetIndex.name:targetIndex.values}\n    for coord in dataArray.coords:\n        if coord!=sourceIndex.name:\n            _reindexDic[ coord] = dataArray.coords[coord].values\n    _da = _da.reindex(_reindexDic)\n    # fin reindex\n    return _da.fillna(0)\n    \nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "aggregate", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Aggregate", "units": null, "w": 179, "x": 505, "y": 164, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(cube):\n    \"\"\"Returns a list of all the elements of the index for which cube is true. The function is used to create a new index that is a subset of an existing index.\n        Ex. subset(sales>0)\n    \"\"\"\n    cond = cube>0\n    values = cond.coords[cond.dims[0]].values[cond.values]\n    return pd.Index(values)\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "subset", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Subset", "units": null, "w": 179, "x": 107, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "def _fn( param1, separator, part=None ): \n    \"\"\"\n    Description: Returns a DataArray object with text values formed by splitting the elements of param1 text values at each occurrence of separator \"separator\". \n    The DataArray will have the original dimension plus a new dimension 'Parts' of length (number of separators + 1). \n    All text values must have the same number of separators separator.        \n    \"\"\"\n    if isinstance(param1, pd.Index) : \n        param1 = xr.DataArray(param1.values, [param1]) \n\n    _q_separators = apply_fn( param1, lambda x: x.count(separator) ) \n    _max_q_separators = np.asscalar( _q_separators.max().values ) \n    _result_coords = ['Part ' + str(i) for i in range( 1, _max_q_separators + 2)] \n    _result_dim = pd.Index( _result_coords ) \n    _result_dim.name = \"Parts\" \n\n    _results = [] \n\n    for _part in range( _max_q_separators + 1 ): \n        _dataarray = apply_fn( param1, lambda x: x.split(separator)[_part] ) \n        _results.append(_dataarray) \n\n    _res = xr.concat( _results, dim = _result_dim )\n\n    if not part is None:\n        _res = _res.sel(Parts=\"Part \" + str(part),drop=True)\n\n    return _res\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "split_text", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Split Text", "units": null, "w": 179, "x": 107, "y": 312, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(index): \n    \"\"\"\n    Return datarray with pd.index and yours positions as values\n    \"\"\"\n    return xr.DataArray(range(0,len(index)), [index] )\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "get_pos", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get pos", "units": null, "w": 179, "x": 107, "y": 349, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(*args):\n    \"\"\"\n    Concatenates two or more indexes and/or atomic values into a single new index\n    Return: new index\n        Ex.\n            cp.concatIndex(index1,index2,index3,value1,value2)\n    \"\"\"\n    _list = []\n    for arg in args:\n        if isinstance(arg,pd.Index):\n            values = (arg.values).tolist()\n            _list.extend(values)\n        else:\n            _list.append(arg)\n\n    seripandas = pd.Series(_list)\n    return pd.Index(seripandas.unique())\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "concat_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Concat Index", "units": null, "w": 179, "x": 107, "y": 386, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(index,selection,includeAll=False):\n    \"\"\"Return the element in the \"selection\" position of the index. \n    \"\"\"\n    if selection==0 and includeAll==1:\n        return \"All\"\n    else:\n        values = None\n        if isinstance(index,pd.Index):\n            values = (index.values[:1000]).tolist()\n        elif isinstance(index,np.ndarray):\n            values = (index[:1000]).tolist()\n        else:\n            values = list(index)[:1000]\n        if not values is None and len(values)>=selection:\n            return values[selection-1]\n    return \"\"\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "choice", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Choice", "units": null, "w": 179, "x": 505, "y": 201, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataArray,index,shift, initialValues=None):\n    \"\"\"\n    Perform cyclic calculations betwwen nodes.\n    cube: cp.cube to evaluate\n    index: Index to shift \n    shift: amount of elemnts to shift. Can be positive or negative\n    initialValues: (optional), initial values to apply to first \"shift\" elemnts\n    \"\"\"\n    _da = dataArray.shift({index.name:(shift*-1)})\n    if not initialValues is None:\n        _da = _da.fillna(initialValues)\n    return _da\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "dynamic", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Dynamic", "units": null, "w": 179, "x": 505, "y": 238, "z": 1}, {"color": "#EEEEEE", "definition": null, "description": "Pyplan XArray Extensions - 31-Ene-2020", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 521, "identifier": "a46ff2bbf32b248e9abbbeed6c482547b", "moduleId": "pyplan_xarray_extensions", "nodeClass": "text", "nodeFont": "Helvetica,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": 851, "x": 46, "y": 53, "z": -1}, {"color": null, "definition": "def _fn(dataArray, index, position):\r\n    \"\"\"\r\n    Filter dataArray by integer position along the specified index.\r\n    \r\n    dataArray: dataArray to be filtered\r\n    index: pp.index \r\n    position: int \r\n        Ex.\r\n            pp.isel(dataArray1, index1, 0)\r\n    \"\"\"\r\n    if not isinstance(dataArray,xr.DataArray):\r\n        raise ValueError(\"the 'dataArray' parameter must be of the type xr.DataArray\")\r\n    return dataArray.isel({index.name:position},drop=True)\r\n    \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "slice_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Slice", "units": null, "w": 179, "x": 505, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(param):\n   return xr.DataArray(param.values,[param])\n   \n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "to_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "To Dataarray", "units": null, "w": 179, "x": 306, "y": 423, "z": 1}, {"color": null, "definition": "def _fn(dataArray,value=0):\r\n    \"\"\"Fill np.inf values with default value\r\n        Ex.\r\n            fill_inf(dataArray,0)\r\n    \"\"\"\r\n    return apply_fn(dataArray,lambda x: value if np.isinf(x) else x)\r\n    \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "fill_inf", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fill inf", "units": null, "w": 179, "x": 505, "y": 312, "z": 1}, {"color": null, "definition": "def _fn(dataArray,value=0):\r\n    \"\"\"Fill np.inf and np.nan with default value\r\n        Ex.\r\n            fill_all(dataArray,0)\r\n    \"\"\"\r\n    return fill_inf(dataArray.fillna(value),value)\r\n    \r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "fill_all", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fill all", "units": null, "w": 179, "x": 505, "y": 349, "z": 1}, {"color": "#cb98ff", "definition": "def _fn( obj, applyFn, *args):\n    \"\"\" Apply \"applyFn\" to \"obj\" where obj can be DataArray or Index\n    \"\"\"\n    vfn = np.vectorize(applyFn)\n    if isinstance(obj,pd.Index):\n        \n        return pd.Index(np.unique(vfn(obj.values,*args)))\n        \n    if isinstance(obj,xr.DataArray):\n        return xr.apply_ufunc(vfn,obj,*args)\n    return None\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "apply_fn", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Apply", "units": null, "w": 179, "x": 107, "y": 238, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(start, periods, freq='M', format='%Y.%m'):\n    \"\"\"Add periods to a date. Can set freq and output format \n        Ex.\n            pp.addPeriods('2016.01',6)\n            pp.apply( pp.addPeriods, inicio_de_proyectos , duracin_de_proyectos)\n    \"\"\"\n    if \".\" in start:\n        start = start.replace('.', '-')\n    if periods<0:\n        return pd.period_range(end=start, periods=-periods+1, freq=freq).strftime(format)[0] \n    else:\n        return pd.period_range(start=start, periods=periods+1, freq=freq).strftime(format)[-1] \n   \n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "add_periods", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Add Periods", "units": null, "w": 179, "x": 505, "y": 386, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(nodeIdX, nodeIdObjective, goal=0, startValue=1, matrixIndex=None ): \n    \"\"\" Finds the value of nodeIdX that makes nodeIdObjective equal to goal.\n    nodeIdX: String with id of node X\n    nodeIdObjective: String with id of node X\n    matrixIndex: Index for multidimensional goal seek\n    \"\"\"\n    _aa=subscript\n    _getNodeFn = globals()[\"getNode\"]\n    from scipy.optimize import newton\n    \n    if matrixIndex is None:\n    \n        def _f(x):\n            _getNodeFn(nodeIdX).definition = \"result = \" + str(x)\n            value = _getNodeFn(nodeIdObjective).result\n            return value - goal\n        \n        _res = newton(_f, x0=startValue)\n        return _res\n        \n    else:\n        _indexName=matrixIndex.name\n        for item in years:\n            def _f(x):\n                _values = _getNodeFn(nodeIdX).result\n                _values.loc[{_indexName: slice(item, item)}] = x\n                np.set_printoptions(threshold = np.prod(_values.values.shape))\n                data = np.array2string(_values.values, separator=\",\", precision=20 , formatter={'float_kind':lambda x: repr(x)}).replace('\\n','')\n                _getNodeFn(nodeIdX).definition = f\"result = xr.DataArray({data},[{_indexName}])\"\n                value = _getNodeFn(nodeIdObjective).result\n                return subscript(value,matrixIndex,item)\n            _res = newton(_f, x0=1)\n\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "goal_seek", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Goal Seek", "units": null, "w": 179, "x": 306, "y": 460, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(rate, flow, time_index, offset = 1): \n    \"\"\"\"Returns the Net Present Value (NPV) of a cash flow with equally spaced periods. The flow parameter must contain a series of periodic payments (negative values) and inflows (positive values), indexed by time_index.\n        The optional offset parameter especifies the offset of the first value relative to the current time period. By default, offset is set to 1, indicating that the first value is discounted as if it is one step in the future\n    \"\"\"\n    _number_of_periods = get_pos(time_index) + offset \n    _present_values = flow / ( 1 + rate ) ** _number_of_periods \n    _npv = _present_values.sum(time_index.name ) \n    return _npv\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "npv", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "NPV", "units": null, "w": 179, "x": 505, "y": 423, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(flow, time_index ):\n    \"\"\"Returns the Internal Rate of Return (IRR) of a series of periodic payments (negative values) and inflows (positive values). The IRR is the discount rate at which the Net Present Value (NPV) of the flows equals zero. \n        The variable flow must be indexed by time_index.\n\n    If the cash flow never changes sign, cp.irr() has no solution and returns NAN (Not A Number).\n    \"\"\"\n    import pandas as pd\n    _getNodeFn = globals()[\"getNode\"]\n    \n\n    _rest_of_indexes_labels = np.setdiff1d( flow.dims, [time_index.name])\n\n    _cube = None\n    if len( _rest_of_indexes_labels ) == 0: \n        _cube = np.irr( flow.values ) \n    else:\n        _rest_of_indexes = [_getNodeFn(xx).result for xx in _rest_of_indexes_labels]\n        _cube = create_dataarray(0.,_rest_of_indexes)\n        _multivalues = [idx.values for idx in _rest_of_indexes] \n        _values = pd.MultiIndex.from_product( _multivalues ).values \n        \n        for _item in _values: \n            _filter = {}\n\n            for _nn in range(len(_item)): \n                _filter[ _rest_of_indexes[_nn].name ] = _item[_nn]\n                \n            _toIrr = flow.sel(_filter).values\n            _irr = np.irr( _toIrr ) \n            _cube.loc[_filter] = _irr\n\n\n    return _cube\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "irr", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "IRR", "units": null, "w": 179, "x": 107, "y": 460, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(investments, usefulLife, timeIndex, includeInCurrentMonth=False):\n    \"\"\" TODO: comment\n        investments: investments\n        usefulLife: useful life in years\n    \n        Ex.\n            linear_depreciation(investments, usefulLife)\n    \"\"\"\n    \n    timeCoords = xr.DataArray(timeIndex.values, [timeIndex])\n    _cuota = investments/usefulLife/12\n    _newTime = xr.DataArray( timeCoords.values, [('new_time',timeCoords.values ) ] )\n    _ending = apply_fn(timeCoords, add_periods, usefulLife*12)\n    if includeInCurrentMonth:\n        _proy = xr.where( (_newTime >= timeCoords) & (_newTime < _ending), _cuota , 0  )\n    else:\n        _proy = xr.where( (_newTime > timeCoords) & (_newTime <= _ending), _cuota , 0  )\n    _final = _proy.sum(timeIndex.name)\n    _final = _final.rename({\"new_time\":timeIndex.name})\n    return _final\n   \n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "linear_depreciation", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Linear depreciation", "units": null, "w": 179, "x": 107, "y": 423, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataArray, sortValues=True):\n    \"\"\"Generates a pd.Index with the unique values of the dataArray.\n    \"\"\"\n    np_values = dataArray.values.flatten()\n    \n    # Numpy unique function automatically reorders. Pandas unique, does not. \n    if sortValues is True:\n        return pd.Index(np.unique(np_values))\n    else:\n        return pd.Index(np_values).unique()\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "copy_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Copy Index", "units": null, "w": 179, "x": 505, "y": 460, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(source, targetId):\n    \"\"\"Copy values of datArray \"source\" into dataArray with id 'targetId'. This function alter the definition of dataArray with 'targetId' identifier.\n            source: dataArray/index from copy values\n            targetId: identifier (string) of the target node \n    \"\"\"\n    \n    _getNodeFn = globals()[\"getNode\"]\n\n    if isinstance(source,str):\n        source = self.node.model._getNodeFn(source).result\n\n\n    if not isinstance(source,xr.DataArray) and not isinstance(source,pd.Index) and not isinstance(source,float) and not isinstance(source,int):\n        raise ValueError(\"The 'source' parameter must be a xr.DataArray, pd.Index, float or int\")\n\n    if not isinstance(targetId,str):\n        raise ValueError(\"The 'targetId' parameter must be a string (identifier of node)\")\n    \n        \n    newDef = \"\"\n    if isinstance(source,float) or isinstance(source,int):\n        newDef = f\"result = {str(source)}\" \n    elif isinstance(source,xr.DataArray):\n        _indexes = str(list(source.dims)).replace(\"'\",'')\n        np.set_printoptions(threshold = np.prod(source.values.shape))\n        _data = np.array2string(source.values, separator=\",\", precision=20 , formatter={'float_kind':lambda x: repr(x)}).replace('\\n','')\n        newDef = f\"result = xr.DataArray({_data},{_indexes})\"\n    elif isinstance(source,pd.Index):\n        np.set_printoptions(threshold = np.prod(source.values.shape))\n        _data = np.array2string(source.values, separator=\",\", precision=20 , formatter={'float_kind':lambda x: repr(x)}).replace('\\n','')\n        newDef = f\"result = pd.Index({_data})\"\n    \n    _getNodeFn(targetId).definition = newDef\n    return True\n\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "copy_as_values", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Copy as values", "units": null, "w": 179, "x": 106, "y": 497, "z": 1}, {"color": "#cb98ff", "definition": "def _sequence(_start, _end, _step=1):\n   \"\"\"\n   Returns a pd.Index with the sequence between 'start' and 'end' parameters. Both limits are inclusive. Values are converted to string.\n   \"\"\"\n   \n   try:\n       _start = int(_start)\n       _end = int(_end) + 1\n       _step = int(_step)\n   except:\n       raise ValueError(\"Only numbers are allowed as 'start', 'end' and 'step' parameters\")\n   \n   _list = [str(x) for x in range(_start, _end, _step)]\n   _index = pd.Index(_list)\n   return _index\n\nresult = _sequence", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "sequence_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sequence Index", "units": null, "w": 179, "x": 505, "y": 497, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataframe, domainDic, valueColumns, defaultValue = None, valueColumnsAsDim = True, sumDuplicateRecords = True):\r\n    \"\"\" Returns a DataArray (valueColumns is string or (valueColumns is pd.Index and valueColumnsAsDim is True)) or Dataset (valueColumns is a list or (valueColumns is a pd.Index and valueColumnsAsDim is False)) from a Pandas dataframe applying the set_domain function.\r\n    dataframe: Pandas dataframe with no index columns.\r\n    domainDic: Dictionary of column names and index names. Ex. {'Column Name': index_name}.\r\n    valueColumns: String, list or pd.Index. Dataframe's value columns.\r\n    defaultValue: Default value when applying set_domain function.\r\n    valueColumnsAsDim: If True, valueColumns becomes a dimension of resulting DataArray. If False, each value column becomes a variable of the resulting Dataset.\r\n    sumDuplicateRecords: If True, sums identical rows. Otherwise, removes duplicates (except the first one). \r\n    \r\n    Ex. pandas_to_dataarray(sales_dataframe, {'Sales Channel': sales_channels, 'Market Segment': market_segments, 'Month': time}, 'Sales', 0.)\r\n    \"\"\"\r\n    _index_value_columns = None\r\n    \r\n    # Check if valueColumns is string, list, np.ndarray or pd.Index (transform to list) and indexes is dict.\r\n    if isinstance(valueColumns, pd.Index):\r\n        _index_value_columns = valueColumns.copy()\r\n        _index_value_columns_name = _index_value_columns.name\r\n        valueColumns = valueColumns.values.tolist()\r\n    elif isinstance(valueColumns, np.ndarray):\r\n        valueColumns = valueColumns.tolist()\r\n    elif not isinstance(valueColumns, str) and not isinstance(valueColumns, list):\r\n        raise ValueError(\"valueColumns must be a string, a list or a pd.Index\")\r\n    if not isinstance(domainDic, dict):\r\n        raise ValueError(\"Indexes must be a dictionary\")\r\n    \r\n    # Transform indexes into list and create list with all columns.\r\n    _index_cols = list(domainDic.keys())\r\n    _cols = _index_cols.copy()\r\n    \r\n    if isinstance(valueColumns, list):\r\n        _cols = _cols + valueColumns\r\n    else:\r\n        _cols.append(valueColumns)\r\n    \r\n    # If valueColumnsAsDim is True, check if every column is in dataframe and filter it.\r\n    if (valueColumnsAsDim is True) and isinstance(_index_value_columns, pd.Index):\r\n        _df_columns = dataframe.columns.values.tolist()\r\n        _cols = [value for value in _df_columns if value in _cols]\r\n    \r\n    # Filter dataframe by columns.\r\n    _df = dataframe[_cols]\r\n    \r\n    # Sum identical rows or remove duplicates.\r\n    if sumDuplicateRecords is True:\r\n        _df = _df.groupby(_index_cols, as_index = False).sum()\r\n    else:\r\n        _duplicate_rows =_df.duplicated(_index_cols)\r\n        _df = _df[~_duplicate_rows]\r\n    \r\n    # If valueColumnsAsDim is True, melt valueColumns.\r\n    if (valueColumnsAsDim is True) and isinstance(_index_value_columns, pd.Index):\r\n        # Unpivot dataframe from wide format to long format by valueColumns.\r\n        _df = pd.melt(_df, id_vars = _index_cols, value_vars = _index_value_columns, var_name = _index_value_columns_name, value_name = 'values')\r\n        _index_cols = _index_cols + [_index_value_columns_name]\r\n        domainDic[_index_value_columns_name] = _index_value_columns\r\n        \r\n        # Create DataArray\r\n        _data = _df.set_index(_index_cols)['values'].to_xarray()\r\n        \r\n        # Appy set_domain function to DataArray / Dataset.\r\n        _data = set_domain(_data, domainDic, defaultValue)\r\n    else:\r\n        # Create DataArray / Dataset.\r\n        _data = _df.set_index(_index_cols)[valueColumns].to_xarray()\r\n        \r\n        # Appy set_domain function to DataArray / Dataset.\r\n        _data = set_domain(_data, domainDic, defaultValue)\r\n        \r\n    return _data\r\n\r\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "dataarray_from_pandas", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "DataArray from Pandas", "units": null, "w": 179, "x": 306, "y": 349, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(dataArray, targetValue, targetIndex, method = 'Last'):\n    \"\"\" Returns a dataArray containing the value of targetIndex for which dataArray (indexed by targetIndex) is equal to targetValue.\n    dataArray: Xarray dataArray.\n    targetValue: Integer, Float or String.\n    targetIndex: Pandas Index.\n    method: There are two options: \"Last\" returns the last occurrence of targetIndex for which dataArray is equal to targetValue. \"First\" returns the first occurrence.\n    \"\"\"\n    \n    # Equals dataArray to targetValue and cumulates it along targetIndex.\n    _matriz_1_0 = xr.where(dataArray == targetValue, 1, 0)\n    _matriz_1_0_acum = xr.where(_matriz_1_0 == 1, _matriz_1_0.cumsum(targetIndex.name), 0)\n    \n    if method == 'Last':\n        # Get max cumulated value along targetIndex\n        _max = _matriz_1_0_acum.max(targetIndex.name)\n        _max = xr.where(_max == 0, np.nan, _max)\n        _matriz_max = xr.where(_matriz_1_0_acum == _max, to_dataarray(targetIndex), np.nan)\n        return _matriz_max.max(targetIndex.name)\n    elif method == 'First':\n        # Get min (1) cumulated value along targetIndex\n        _matriz_min = xr.where(_matriz_1_0_acum == 1, to_dataarray(targetIndex), np.nan)\n        return _matriz_min.max(targetIndex.name)\n    else:\n        raise ValueError(\"Insert a valid method\")\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "subindex", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Subindex", "units": null, "w": 179, "x": 700, "y": 90, "z": 1}, {"color": "#cb98ff", "definition": "def _concat_rows(array_param, index_param):\n   _index = pd.Index([])\n   for i in index_param.values:\n       _index = concat_index(_index , pd.Index(array_param.sel({index_param.name:i}, drop=True).values))\n   return _index\n\nresult = _concat_rows", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "concat_rows", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Concat Rows", "units": null, "w": 179, "x": 700, "y": 127, "z": 1}, {"color": "#cb98ff", "definition": "import plotly.io as pio\nfrom plotly.graph_objs._figure import Figure\n\ndef _fn(fig, **kwargs):\n    \"\"\"\n        Generate HTML with plotly chart\n        Params:\n            fig: plotly fig\n    \"\"\"\n    if isinstance(fig, dict):\n        fig = Figure(fig)\n    \n    if isinstance(fig,Figure):\n        if not \"layout\" in fig or not \"margin\" in fig[\"layout\"] or fig[\"layout\"][\"margin\"][\"b\"] is None:\n            fig.update_layout(margin=dict(b=10))\n        if not \"layout\" in fig or not \"margin\" in fig[\"layout\"] or fig[\"layout\"][\"margin\"][\"t\"] is None:\n            fig.update_layout(margin=dict(t=10))\n        if not \"layout\" in fig or not \"margin\" in fig[\"layout\"] or fig[\"layout\"][\"margin\"][\"l\"] is None:\n            fig.update_layout(margin=dict(l=10))\n            \n\n    return pio.to_html(fig,full_html=False, include_plotlyjs=False, **kwargs)\n\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "plot", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Plot", "units": null, "w": 179, "x": 700, "y": 164, "z": 1}, {"color": "#cb98ff", "definition": "def _fn(task_state=\"PROGRESS\",task_description=None,task_activity=None, task_info=None):\n    \"\"\"\n        Generate log entry. Used for schedule tasks\n        params:\n          task_state: PROGRESS, INFO, WARNING, FAILURE, RETRY, SUCCESS, REVOKED, STARTED, PENDING, RECEIVED\n          task_description: Shot description of task. example: start process\n          task_activity: other short description\n          task_info: json with more info \n    \"\"\"\n\n    import requests\n    from os import environ\n    import json\n    _params = {\n            \"state\": task_state,\n            \"description\": task_description,\n            \"activity\": task_activity,\n            \"info\": json.dumps(task_info)}\n    \n    res=None\n\n    if task_log_endpoint:\n        base_host = environ['PYPLAN_API_HOST'] + task_log_endpoint\n        res = requests.post(base_host, data=_params)\n    else:\n        print(str(_params))\n        \n    return res\n\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "log_task", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Log Task", "units": null, "w": 179, "x": 700, "y": 201, "z": 1}, {"color": "#cb98ff", "definition": "install_library(\"pyxlsb\")\n\ndef _fn(filepath):\n    from pyxlsb import open_workbook as open_xlsb\n    \n    _df = []\n    \n    with open_xlsb(filepath) as wb:\n        with wb.get_sheet(1) as sheet:\n            for row in sheet.rows():\n                _df.append([item.v for item in row])\n    \n    return pd.DataFrame(_df[1:], columns = _df[0])\n\nresult = _fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "pandas_from_xlsb_file", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_engine.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pandas from XLSB File", "units": null, "w": 179, "x": 700, "y": 238, "z": 1}]}