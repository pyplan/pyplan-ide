/*! Copyright Pyplan 2020. All rights reserved. */
(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{1121:function(n,e,l){"use strict";(function(a,o,t){var d,i,s=l(18);d=[l(684),l(219),l(1884)],void 0===(i=function(n,e,d){return a.View.extend({el:o("#main"),nodeDic:{},render:function(a){var i=this,c=new e;c.getModelInfo(function(e){var a=d(e);i.$el.append(a),o("#modelInfoModal").on("hidden.bs.modal",function(){o("#modelInfoModal").off("hidden"),o("#modelInfoModal").remove()}).modal("show"),o("#modelInfoModal .closeModel").on("click",function(e){var a=!1;o("a.btnSaveModel").length>0&&o("a.btnSaveModel").is(":visible")&&(a=o("a.btnSaveModel").parent().hasClass("modelopened with-pending-changes"));var d=o("#main .mainTask").length,i=function e(){var l=0;o("#main .mainTask").each(function(a,d){var i=t.Event("beforeRemoveView");if(o(this).trigger(i,[function(){l++,e()}]),i.isDefaultPrevented())return(new n).selectTask(o(this).attr("data-rel")),!1;l++}),l>=d&&r()},r=function(){c.closeModel(function(){o("#summary").trigger("refresh"),o("#modelInfoModal").modal("hide")})};a?(o("#modelInfoModal").modal("hide"),Promise.resolve().then(function(){var n=[l(683)];(function(n){(new n).show({title:(0,s.translate)("model_changes_title"),text:(0,s.translate)("model_changes_text_close"),buttons:[{title:(0,s.translate)("model_changes_confirm"),css:"primary",code:"yes"},{title:(0,s.translate)("model_changes_discard_close"),code:"no"}],callback:function(n){"yes"==n?Promise.resolve().then(function(){var n=[l(219)];(function(n){(new n).saveModel(function(){setTimeout(function(){i()},1e3)})}).apply(null,n)}).catch(l.oe):setTimeout(function(){i()},1e3)}})}).apply(null,n)}).catch(l.oe)):i()})})}})}.apply(e,d))||(n.exports=i)}).call(this,l(218),l(1),l(1))},1884:function(n,e,l){var a=l(690);function o(n){return n&&(n.__esModule?n.default:n)}n.exports=(a.default||a).template({1:function(n,e,a,t,d){var i,s=null!=e?e:n.nullContext||{};return"                <dt>"+n.escapeExpression(o(l(688)).call(s,null!=e?e.Key:e,{name:"L",hash:{},data:d,loc:{start:{line:11,column:20},end:{line:11,column:29}}}))+":</dt>\n                <dd>"+(null!=(i=a.if.call(s,null!=e?e.Value:e,{name:"if",hash:{},fn:n.program(2,d,0),inverse:n.program(4,d,0),data:d,loc:{start:{line:12,column:20},end:{line:12,column:60}}}))?i:"")+"</dd>\n"},2:function(n,e,l,a,o){return n.escapeExpression(n.lambda(null!=e?e.Value:e,e))},4:function(n,e,l,a,o){return" - "},compiler:[8,">= 4.3.0"],main:function(n,e,a,t,d){var i,s=null!=e?e:n.nullContext||{},c=n.escapeExpression;return'<div id="modelInfoModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>\n        <h3>'+c(o(l(688)).call(s,"model_info",{name:"L",hash:{},data:d,loc:{start:{line:6,column:12},end:{line:6,column:30}}}))+'</h3>\n      </div>\n      <div class="modal-body">\n        <dl>\n'+(null!=(i=a.each.call(s,e,{name:"each",hash:{},fn:n.program(1,d,0),inverse:n.noop,data:d,loc:{start:{line:10,column:12},end:{line:13,column:21}}}))?i:"")+'        </dl>\n\n        <div class="row">\n          <div class="col-md-12">\n            <button class="btn btn-lightred closeModel">'+c(o(l(688)).call(s,"close_model",{name:"L",hash:{},data:d,loc:{start:{line:18,column:56},end:{line:18,column:75}}}))+"</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"},useData:!0})}}]);