/*! Copyright Pyplan 2020. All rights reserved. */
(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{1054:function(n,e){function t(n){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}t.keys=function(){return[]},t.resolve=t,n.exports=t,t.id=1054},1237:function(n,e){function t(n){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}t.keys=function(){return[]},t.resolve=t,n.exports=t,t.id=1237},1243:function(n,e){function t(n){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}t.keys=function(){return[]},t.resolve=t,n.exports=t,t.id=1243},1244:function(n,e){function t(n){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}t.keys=function(){return[]},t.resolve=t,n.exports=t,t.id=1244},1262:function(n,e){function t(n){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}t.keys=function(){return[]},t.resolve=t,n.exports=t,t.id=1262},1264:function(n,e){function t(n){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}t.keys=function(){return[]},t.resolve=t,n.exports=t,t.id=1264},1855:function(n,e,t){var o=t(690);function i(n){return n&&(n.__esModule?n.default:n)}n.exports=(o.default||o).template({compiler:[8,">= 4.3.0"],main:function(n,e,o,a,s){var c=null!=e?e:n.nullContext||{},d=n.escapeExpression;return'<div class="row withBottomMargin">\n  <div class="col-sm-12">\n    <button class="btn btn-orange btn--icon btnStartDebug"><i class="fa fa-bug"></i>'+d(i(t(688)).call(c,"start_debug",{name:"L",hash:{},data:s,loc:{start:{line:3,column:84},end:{line:3,column:103}}}))+'</button>\n\n    <input type="radio" class=\'icheck-me checked\' id="reset_model_option_node" name="reset_model_option"\n      data-skin="square" data-color="blue" checked="checked">\n    <label class=\'inline\' for="reset_model_option_node">'+d(i(t(688)).call(c,"reset_this_node",{name:"L",hash:{},data:s,loc:{start:{line:7,column:56},end:{line:7,column:79}}}))+'</label>\n\n    <input type="radio" class=\'icheck-me\' id="reset_model_option_model" name="reset_model_option" data-skin="square"\n      data-color="blue">\n    <label class=\'inline\' for="reset_model_option_model">'+d(i(t(688)).call(c,"reset_entire_model",{name:"L",hash:{},data:s,loc:{start:{line:11,column:57},end:{line:11,column:83}}}))+'</label>\n  </div>\n\n</div>\n\n<div class="row">\n  <div class="col-sm-6">\n    <pre class="debugLog"></pre>\n  </div>\n  <div class="col-sm-6">\n\n    <div class="row">\n\n      <div class="col-sm-6">\n        <div class="box">\n          <div class="box-title">\n            <h3>\n              <i class="fa fa-clock"></i>\n              '+d(i(t(688)).call(c,"acc_calc_time",{name:"L",hash:{},data:s,loc:{start:{line:29,column:14},end:{line:29,column:35}}}))+'\n            </h3>\n          </div>\n          <div class="box-content">\n            <div class="row text-center">\n              <h2 class="name cumTime">-</h2>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class="col-sm-6">\n        <div class="box">\n          <div class="box-title">\n            <h3>\n              <i class="fa fa-bars"></i>\n              '+d(i(t(688)).call(c,"container_memory",{name:"L",hash:{},data:s,loc:{start:{line:45,column:14},end:{line:45,column:38}}}))+'\n            </h3>\n          </div>\n          <div class="box-content">\n            <div class="row text-center">\n              <h2 class="name cumMem">-</h2>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class="row">\n\n      <div class="col-sm-12 progressChartContainer nodisplay ">\n        <div class="box">\n          <div class="box-title">\n            <h3>\n              <i class="fa fa-chart-line"></i>\n              '+d(i(t(688)).call(c,"memory_progress",{name:"L",hash:{},data:s,loc:{start:{line:64,column:14},end:{line:64,column:37}}}))+'\n            </h3>\n          </div>\n          <div class="box-content">\n            <div class="row">\n              <div class="progress_chart">\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>'},useData:!0})},958:function(n,e,t){"use strict";(function(o,i){var a,s,c=t(18);t(1183);a=[t(219),t(683),t(1855)],void 0===(s=function(n,e,t){return o.View.extend({el:i("#main"),cumTime:0,categories:[],points:[],render:function(){var n=this,o=t(this.options);(new e).show({title:"".concat((0,c.translate)("debug_node"),": ").concat(this.options.nodeTitle," (").concat(this.options.nodeId,")"),html:o,modalClass:"debugNodeView",onLoad:function(){var e=i("#main-modal"),t=e.find(".debugLog"),o=parseInt(.9*i(window).height()-200).toString();t.css("height","".concat(o,"px")),e.on("debug_info",function(o,i){n.updateDebugInfo(e,t,i)}),e.find(".btnStartDebug").on("click",function(){n.startDebug(e,t)}),(0,c.postRender)(e)},onClose:function(){n.points=[],n.categories=[]}})},startDebug:function(e,t){e.find(".btnStartDebug").attr("disabled",!0);var o=new n;t.text(""),e.find(".cumMem").text("-"),e.find(".cumTime").text("-"),e.find(".progressChartContainer").hide(),this.points=[],this.categories=[],this.cumTime=0,o.previewNode(this.options.nodeId,function(n){e.find(".btnStartDebug").attr("disabled",!1)},function(){e.find(".btnStartDebug").attr("disabled",!1)},e.find("#reset_model_option_node").is(":checked")?"node":"model")},updateDebugInfo:function(n,e,t){if("endPreview"==t.action)i("<span></span>").text("---------------- end ----------------").appendTo(e),e.scrollTop(e.prop("scrollHeight")),this.createChart(n);else{var o="<code ".concat("endCalc"==t.action?"title='Time:".concat(t.time,"'"):""," class='").concat(t.action,"'>").concat(t.action,"</code> ").concat(t.fromDynamic?'<code class="dynamic">dynamic</code>':""," <span>").concat(t.title," (").concat(t.node,")</span>");if(i("".concat(o,"<br>")).appendTo(e),e.scrollTop(e.prop("scrollHeight")),"endCalc"==t.action){this.cumTime+=parseFloat(t.time);var a=t.totalMemory>0?parseFloat(t.usedMemory/t.totalMemory*100):0;n.find(".cumMem").text("".concat(t.usedMemory.toFixed(2)," Gb - ").concat(a.toFixed(0),"%")),n.find(".cumTime").text("".concat(this.cumTime.toFixed(2)," sec.")),this.categories.push(t.node),this.points.push(t.usedMemory)}}},createChart:function(n){n.find(".progressChartContainer").show(),this.$el.find(".progress_chart").highcharts({chart:{type:"area",zoomType:"xy",height:n.find(".debugLog").height()-n.find(".cumTime").closest(".box").height()-60,marginTop:10},title:!1,xAxis:{categories:this.categories,labels:{enabled:!1}},yAxis:{title:{text:"Memory (gb)"}},legend:!1,exporting:{enabled:!1},credits:!1,series:[{name:"Memory (gb)",data:this.points,tooltip:{valueDecimals:2,valueSuffix:" gb"}}]})}})}.apply(e,a))||(n.exports=s)}).call(this,t(218),t(1))}}]);