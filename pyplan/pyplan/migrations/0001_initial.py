# Generated by Django 2.2.5 on 2019-11-21 17:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import pyplan.pyplan.activity.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(
                    default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('system', models.BooleanField(default=False)),
                ('langCode', models.CharField(max_length=10, null=True)),
                ('imageURL', models.CharField(max_length=200, null=True)),
                ('fromAD', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('my_uuid', models.UUIDField(default=None, null=True)),
                ('my_username', models.CharField(max_length=150, null=True, blank=True, default=None)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'permissions': (('list_sessions', 'Can list sessions'), ('list_company_sessions', 'Can get company sessions'), ('kill_sessions', 'Can kill sessions'), ('do_sanity_check', 'Can do sanity check'), ('change_profile', 'Can change profile'), ('get_user_stats', 'Can get user stats'), ('get_licence_info', 'Can get licence info'), ('add_folder', 'Can add folders'), ('copy_file_or_folder', 'Can copy file or folder'), ('delete_files', 'Can delete files or folders'), ('list_folders', 'Can list folders'), ('view_model_path_root', 'Can view model path root'), ('view_company_root', 'Can view company root'), ('change_default_company_model', 'Can change default company model'), ('add_file_public', 'Can create file in public folder'), ('change_file_name_public', 'Can rename file in public folder'), ('delete_file_public', 'Can delete file in public folder'), ('copy_model_to_my_workspace', 'Can copy model to my workspace'), ('download_files', 'Can download files'), ('upload_file_public', 'Can upload file in Public folder'), ('view_influence_diagram', 'Can view influence diagram'), ('change_influence_diagram', 'Can edit influence diagram'), ('change_group_permissions', 'Can change group permissions'), ('change_model', 'Can change model'), ('change_public_model', 'Can change model in public folder'), ('list_model_functions', 'Can list model functions'), ('list_last_models', 'Can list last models'), ('change_data_snapshots', 'Can change data snapshots'), ('list_users', 'Can list user'), ('impersonate_user', 'Login as other user'), ('view_form', 'Can view form'), ('add_form', 'Create add form'), ('list_forms', 'Can list forms'), ('change_form', 'Can change form'), ('delete_form', 'Can delete form'), ('add_form_entity', 'Can add form entity'), ('delete_form_entity', 'Can drop form entity'), ('view_entity_data', 'Can view entity data'), ('add_entity_data', 'Can add entity data'), ('change_entity_data', 'Can change entity data'), ('delete_entity_data', 'Can delete entity data'), ('view_system_functions', 'Can view system functions')),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, max_length=50, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('system', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('licence', models.CharField(max_length=4000, null=True)),
            ],
            options={
                'verbose_name_plural': 'companies',
                'permissions': (('list_companies', 'List companies'),),
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=255)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_fav', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False)),
                ('definition', jsonfield.fields.JSONField(null=True)),
                ('node', models.CharField(blank=True, max_length=255, null=True)),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'permissions': (('share_dashboard', 'Can share a dashboard'), ('export_dashboard', 'Can export a dashboard'), ('import_dashboard', 'Can import a dashboard'), ('generate_external_link', 'Can generate external link to a dashboard'), ('manage_external_link', 'Can manage external link to a dashboard'), ('list_dashboards', 'Can list dashboards')),
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('engine_definitions', jsonfield.fields.JSONField(blank=True, null=True)),
                ('login_action', jsonfield.fields.JSONField(blank=True, null=True)),
                ('denied_items', jsonfield.fields.JSONField(
                    blank=True, help_text='{ "folders": ["folder_a"], "modules": [{ "model_id": "model_a", "modules_ids": ["id_of_module"] }] }', null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyplan.Company')),
            ],
        ),
        migrations.CreateModel(
            name='ExternalLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('model_path', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('common_instance', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('definition', jsonfield.fields.JSONField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PreferenceModule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserCompany',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='pyplan.Company')),
                ('departments', models.ManyToManyField(related_name='usercompanies', to='pyplan.Department')),
            ],
        ),
        migrations.CreateModel(
            name='NodeExternalLink',
            fields=[
                ('external_link', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                                       primary_key=True, related_name='node_external_link', serialize=False, to='pyplan.ExternalLink')),
                ('node_id', models.CharField(max_length=255)),
            ],
            bases=('pyplan.externallink',),
        ),
        migrations.CreateModel(
            name='UserCompanyPreference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', jsonfield.fields.JSONField(null=True)),
                ('preference', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='pyplan.Preference')),
                ('user_company', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='pyplan.UserCompany')),
            ],
        ),
        migrations.AddField(
            model_name='usercompany',
            name='preferences',
            field=models.ManyToManyField(through='pyplan.UserCompanyPreference', to='pyplan.Preference'),
        ),
        migrations.AddField(
            model_name='usercompany',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='usercompanies', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=255)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_fav', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('departments', models.ManyToManyField(blank=True,
                                                       related_name='shared_reports', to='pyplan.Department')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                                            related_name='reports', to='pyplan.UserCompany')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                             related_name='reports', to='pyplan.Report')),
                ('usercompanies', models.ManyToManyField(blank=True,
                                                         related_name='shared_reports', to='pyplan.UserCompany')),
            ],
            options={
                'permissions': (('get_my_reports', 'Can get my reports'), ('organize_reports', 'Can organize reports')),
            },
        ),
        migrations.AddField(
            model_name='preference',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    to='pyplan.PreferenceModule'),
        ),
        migrations.CreateModel(
            name='InputTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('filepath', models.CharField(blank=True, max_length=255, null=True)),
                ('definition', jsonfield.fields.JSONField(blank=True, null=True)),
                ('departments', models.ManyToManyField(blank=True, to='pyplan.Department')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='pyplan.UserCompany')),
            ],
            options={
                'permissions': (('view_my_input_templates', 'View my input templates'), ('view_all_input_templates', 'View all input templates'), ('manage_input_templates', 'Manage templates')),
            },
        ),
        migrations.AddField(
            model_name='externallink',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='external_links', to='pyplan.UserCompany'),
        ),
        migrations.CreateModel(
            name='EmailQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subject', models.TextField()),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('email_from', models.EmailField(max_length=254)),
                ('name_from', models.TextField()),
                ('email_to', models.EmailField(max_length=254)),
                ('name_to', models.TextField()),
                ('date_sent', models.DateTimeField(null=True)),
                ('retries', models.IntegerField(default=0)),
                ('email_type', models.IntegerField()),
                ('context', models.TextField(null=True)),
                ('usercompany', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='pyplan.UserCompany')),
            ],
        ),
        migrations.CreateModel(
            name='DiagramShortcut',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=255)),
                ('node_id', models.CharField(max_length=255)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('usercompany', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='diagram_shortcuts', to='pyplan.UserCompany')),
            ],
        ),
        migrations.CreateModel(
            name='DashboardStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('definition', jsonfield.fields.JSONField(null=True)),
                ('style_type', models.IntegerField(choices=[
                 (-1, 'All'), (0, 'Range map color'), (1, 'Range indicator'), (2, 'Range gauge'), (3, 'Color series'), (4, 'Icons')], default=-1)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='pyplan.UserCompany')),
            ],
        ),
        migrations.CreateModel(
            name='DashboardComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('extra_data', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dashboard', models.ForeignKey(null=True,
                                                on_delete=django.db.models.deletion.CASCADE, to='pyplan.Dashboard')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='pyplan.UserCompany')),
            ],
            options={
                'permissions': (('list_dashboardcomments', 'Can list dashboard comments'),),
            },
        ),
        migrations.AddField(
            model_name='dashboard',
            name='departments',
            field=models.ManyToManyField(
                blank=True, related_name='shared_dashboards', to='pyplan.Department'),
        ),
        migrations.AddField(
            model_name='dashboard',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='dashboards', to='pyplan.UserCompany'),
        ),
        migrations.AddField(
            model_name='dashboard',
            name='report',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='dashboards', to='pyplan.Report'),
        ),
        migrations.AddField(
            model_name='dashboard',
            name='styles',
            field=models.ManyToManyField(blank=True, related_name='dashboards', to='pyplan.DashboardStyle'),
        ),
        migrations.AddField(
            model_name='dashboard',
            name='usercompanies',
            field=models.ManyToManyField(
                blank=True, related_name='shared_dashboards', to='pyplan.UserCompany'),
        ),
        migrations.CreateModel(
            name='CompanyPreference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', jsonfield.fields.JSONField(null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='pyplan.Company')),
                ('preference', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='pyplan.Preference')),
            ],
        ),
        migrations.AddField(
            model_name='company',
            name='preferences',
            field=models.ManyToManyField(through='pyplan.CompanyPreference', to='pyplan.Preference'),
        ),
        migrations.AddField(
            model_name='company',
            name='users',
            field=models.ManyToManyField(through='pyplan.UserCompany', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AppPool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.CharField(max_length=255)),
                ('modelinfo', jsonfield.fields.JSONField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              related_name='app_pool', to='pyplan.Company')),
                ('usercompany', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='app_pool', to='pyplan.UserCompany')),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[(pyplan.pyplan.activity.models.ActivityType(
                    'model'), 'model'), (pyplan.pyplan.activity.models.ActivityType('dashboard'), 'dashboard')], max_length=50)),
                ('model_path', models.CharField(max_length=500)),
                ('model_name', models.CharField(max_length=254)),
                ('info', jsonfield.fields.JSONField(null=True)),
                ('usercompany', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='activities', to='pyplan.UserCompany')),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='companies',
            field=models.ManyToManyField(through='pyplan.UserCompany', to='pyplan.Company'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                         related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set',
                                         related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='ReportExternalLink',
            fields=[
                ('external_link', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                                       primary_key=True, related_name='report_external_link', serialize=False, to='pyplan.ExternalLink')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                             related_name='external_links', to='pyplan.Report')),
            ],
            bases=('pyplan.externallink',),
        ),
        migrations.CreateModel(
            name='DashboardExternalLink',
            fields=[
                ('external_link', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                                       primary_key=True, related_name='dashboard_external_link', serialize=False, to='pyplan.ExternalLink')),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                related_name='external_links', to='pyplan.Dashboard')),
            ],
            bases=('pyplan.externallink',),
        ),
    ]
